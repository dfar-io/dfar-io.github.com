<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technology on Dave Farinelli</title><link>https://dfar.io/categories/technology/</link><description>Recent content in Technology on Dave Farinelli</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 Feb 2021 02:25:02 +0000</lastBuildDate><atom:link href="https://dfar.io/categories/technology/index.xml" rel="self" type="application/rss+xml"/><item><title>Bulgogi notes</title><link>https://dfar.io/posts/bulgogi-notes/</link><pubDate>Fri, 18 Mar 2022 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/bulgogi-notes/</guid><description>Ingredients 1 lb steak (tenderloin, sirloin, ribeye, flank) 4 garlic gloves (or 4 tsp) 2 green onions 3 tbsp water 2 tbsp soy sauce 2 tbsp sugar (white or brown) 1 tbsp sesame oil black pepper 1 tbsp sesame seeds Process Get steak to slight frozen state Mix marinade, stir until dissolved Cut steak into thin slices Add steak to marinade bowl, mix Cover, fridge for 30 min Clean and start rice Pull steak, cook using skillet.</description></item><item><title>Carbonara Recipe</title><link>https://dfar.io/posts/carbonara-recipe/</link><pubDate>Fri, 18 Mar 2022 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/carbonara-recipe/</guid><description>Ingredients olive oil 1/2 package bacon 1lb spaghetti 8 eggs 1 cup grated parmesan, pecorino Process Start boiling water, skillet with olive oil Dice bacon, cook until crisp, place on paper towel plate Great cheese, add to bowl with eggs and mix. Add pepper. Add salt, cook pasta to al dente. Take 1 cup pasta water, then add separate 3/4 water to cheese mixture. Strain, add pasta, toss in fat Add bacon, mix.</description></item><item><title>Instant Pot Clam Chowder Recipe</title><link>https://dfar.io/posts/instant-pot-clam-chowder-recipe/</link><pubDate>Fri, 18 Mar 2022 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/instant-pot-clam-chowder-recipe/</guid><description>Ingredients 2x 6.5oz canned clams 3 slices bacon 2 tbsp butter 1/2 onion, diced 1 celery stalk 1 clove garlic 1/4 tsp sugar 2/3 cup half &amp;amp; half 1 tbsp corn starch 1 cup diced potatoes (gold or red) 1 strand thyme 1/2 tsp salt 1/8 tsp pepper Serves about 2 cups.
Process Cut bacon into small pieces, saute in IP until almost crispy. Make 1 cup clam juice/water mixture.</description></item><item><title>Pizza notes</title><link>https://dfar.io/posts/pizza-notes/</link><pubDate>Fri, 18 Mar 2022 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/pizza-notes/</guid><description>Part 1 Split dough into 3 parts. Place cornmeal. Leave dough out for around 3-4 hours, wrapped in saran wrap. Part 2 Open chimney, start heating pizza oven, get to ~750F Once close, cover hands in flour, roll and poke dough. Add toppings. Place flour, than pizza on peel. Add to oven, partially close chimney. Pull and turn after 1 minute (2 min. total)</description></item><item><title>Azure 204 Notes</title><link>https://dfar.io/posts/az-204-notes/</link><pubDate>Tue, 02 Nov 2021 22:38:48 +0000</pubDate><guid>https://dfar.io/posts/az-204-notes/</guid><description>Create Serverless Applications Logic Apps - design first, for Devs, GUI/Code, provides integrations Microsoft Power Automate - design first, for BAs/users, GUI only, self-service WebJobs - code first, runs program/script automatically, control of JobHost and retry logic Azure Function - code first, most versatile, should be default option Azure Functions Pay-as-you-go - cheap to use Stateless Event driven (multiple options) Limited execution time/frequency (5 mins) Can use Consumption plan (serverless) or App Service (dedicated, avoids cold starts) Monitoring possible through App.</description></item><item><title>Scallops Recipe</title><link>https://dfar.io/posts/scallops-recipe/</link><pubDate>Fri, 21 May 2021 01:05:31 +0000</pubDate><guid>https://dfar.io/posts/scallops-recipe/</guid><description>Ingredients Sea scallops 1 1/2 tsp Old Bay 1/4 cup butter Process Preheat grill on high Melt butter in microwave. Mix melted butter and Old Bay in bowl. Dry, than add salt and pepper to scallops. Add scallops to bowl and toss. Cook for 3-4 minutes. Flip, cook for 3-4 minutes.</description></item><item><title>Lambchops Recipe</title><link>https://dfar.io/posts/lambchops-recipe/</link><pubDate>Fri, 21 May 2021 00:59:43 +0000</pubDate><guid>https://dfar.io/posts/lambchops-recipe/</guid><description>Ingredients Lollipop lamb chops Salt &amp;amp; pepper Rosemary Thyme Olive oil Oregano Marinate Combine garlic, salt, rosemary, thyme, oil into bowl. Mix until well-blended. Place lamb chops and marinade into bag. Store for at least 2 hours. Process Preheat grill on high. Lay lamb chops onto cutting board, sprinkle pepper. After pre-heat, use non-stick on grill. Cook for 4 minutes. Flip, cook for 2-5 minutes (rare to medium) Season with oregano leaves.</description></item><item><title>Starting Strength Notes</title><link>https://dfar.io/posts/starting-strength-notes/</link><pubDate>Sat, 08 May 2021 21:51:43 -0400</pubDate><guid>https://dfar.io/posts/starting-strength-notes/</guid><description>Programs Phase 1 Squat - 3 x 5 Press/Bench - 3 x 5 Deadlift - 1 x 5 Phase 2 Squat - 3 x 5 Press/Bench - 3 x 5 Power Clean - 5 x 3 Phase 3 Squat - 3 x 5 Press/Bench - 3 x 5 Deadlift (1 x 5), Back Ext. (3 x 10) &amp;amp; Chins, Power Clean (5 x 3), Back Ext.</description></item><item><title>Chocolate Strawberries Recipe</title><link>https://dfar.io/posts/chocolate-strawberries-recipe/</link><pubDate>Sun, 25 Apr 2021 21:02:07 +0000</pubDate><guid>https://dfar.io/posts/chocolate-strawberries-recipe/</guid><description>Needed Chocolate Baking Chips Strawberries Pot and bowl (for double boiler) Wax paper Baking tray Procedure Start boiling 1 inch of water in pot. Dry strawberries, place on paper towel. Setup bowl with 2/3 chocolate chips. Setup baking tray with wax paper. Once boiling, lower heat, place bowl on top. Stir until melted. Add 1/3 chocolate chips, stir until melted. Dip strawberries, place onto wax paper. Place in fridge for at least an hour.</description></item><item><title>Scaffolding a Ruby on Rails Api</title><link>https://dfar.io/posts/scaffold-a-rails-api/</link><pubDate>Sat, 06 Mar 2021 19:00:45 +0000</pubDate><guid>https://dfar.io/posts/scaffold-a-rails-api/</guid><description>Visual Studio Code Setup First, I recommend getting VSCode&amp;rsquo;s Remote Container set up to allow for container-based development and not requiring adding dependencies to your local machine.
Create a directory that will store your Rails project.
mkdir rails-api cd rails-api
Then download the Remote Containers VSCode extension, and add a .devcontainer file using the Ruby on Rails community image.
Scaffolding the Rails API Inside the container, create the Rails API using rails new .</description></item><item><title>Air Fryer Chicken Wings Recipe</title><link>https://dfar.io/posts/air-fryer-chicken-wings-recipe/</link><pubDate>Sat, 27 Feb 2021 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/air-fryer-chicken-wings-recipe/</guid><description>Ingredients Olive oil Salt &amp;amp; Pepper Old Bay Seasoning 1 lb thawed chicken wings Cooks ~8 chicken wings
Process Preheat Air Fryer to 400F Pat wings dry Toss Wings in a bowl with oil, salt, pepper, and Old Bay. Cook for 7 min Turn and cook another 7 min</description></item><item><title>Instant Pot Tomato Bisque Recipe</title><link>https://dfar.io/posts/instant-pot-tomato-bisque-recipe/</link><pubDate>Tue, 23 Feb 2021 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/instant-pot-tomato-bisque-recipe/</guid><description>Ingredients 1 tbsp butter or olive oil 1/4 onion, diced 29oz diced tomatoes 1 tbsp sugar 1 cup chicken broth 1 tbsp dried basil 1/2 cup heavy cream 6 celery sticks, diced 3 carrots, diced Requires a blender (immersion is best)
Serves about 4-5 cups.
Process Heat the Instant Pot on saute, melt butter, cook onions, celery, carrots for 5 minutes. Add tomatoes, sugar, broth, and basil over onions.</description></item><item><title>Installing Arch Linux</title><link>https://dfar.io/installing-arch-linux/</link><pubDate>Mon, 01 Feb 2021 17:19:44 +0000</pubDate><guid>https://dfar.io/installing-arch-linux/</guid><description>Setting up USB Boot Media Arch Linux Windows (using Arch Linux) Windows – use Rufus (you may need to use GPT &amp;amp;&amp;amp; DD image mode) Windows Installation When dual-booting both Windows and Arch Linux, install Windows first using a smaller partition and install any software required.
Installation First, boot the Arch Linux USB stick onto the computer of choice. After finished loading, you should see a command terminal.</description></item><item><title>Configuring Arch Linux</title><link>https://dfar.io/configuring-arch-linux/</link><pubDate>Mon, 01 Feb 2021 02:25:02 +0000</pubDate><guid>https://dfar.io/configuring-arch-linux/</guid><description>If you’re installed Arch Linux, the next step is configuring the system to work as desired. In this guide, I walk through my general configuration of a newly installed Arch Linux instance.
Configure Internet Set up networkmanager and if wireless, connect to an internet source:
sudo systemctl enable NetworkManager.service sudo systemctl start NetworkManager.service connect to wireless nmcli device wifi list nmcli device wifi connect SSID password PASSWORD Confirm access using ping.</description></item><item><title>Adding Nunit Project to nopCommerce Plugin</title><link>https://dfar.io/posts/adding-nunit-project-to-nopcommerce-plugin/</link><pubDate>Tue, 12 Jan 2021 11:59:19 -0500</pubDate><guid>https://dfar.io/posts/adding-nunit-project-to-nopcommerce-plugin/</guid><description>I&amp;rsquo;ve been working on integrating SonarClodu into the nopCommerce Plugin development workflow, and came across a procedure that helps with building out a plugin with the ability to easily integrate it into a fresh copy of nopCommerce.
As an example, you can see it in the FreshAddress Integration Plugin source code.
Plugin Folder Structure .github/workflows Source Plugin Project Tests Test project .gitignore LICENSE README.md sonar-helper.sh A few things to take apart here:</description></item><item><title>Fixing Token Authentication in Azure Static Web Apps</title><link>https://dfar.io/posts/fixing-token-authentication-in-azure-static-web-apps/</link><pubDate>Sun, 03 Jan 2021 14:00:36 -0500</pubDate><guid>https://dfar.io/posts/fixing-token-authentication-in-azure-static-web-apps/</guid><description>I recently moved my app Journally over to an Azure Static Web App in order to save on costs and explore the new technology. When I switched over, I found that anything related to using a bearer token was no longer working.
A little bit of searching found this post, basically saying that Azure Static Web Apps uses the Authorization header when communication between the UI and Function API. Easy solution: I changed Journally to use JournallyAuthorization instead of Authorization, and everything works after that.</description></item><item><title>State of CSS 2020 Takeaways</title><link>https://dfar.io/posts/state-of-css-2020-takeaways/</link><pubDate>Mon, 07 Dec 2020 15:22:52 -0500</pubDate><guid>https://dfar.io/posts/state-of-css-2020-takeaways/</guid><description>The State of CSS 2020 was recently released, and my quick takeaways are:
Both Flexbox and CSS Grid have a lot of usage and should be adopted. In terms of tech, SASS is extremely well liked and prominent. I should be using both Stylelint and Prettier (even in non-JS projects). Bootstrap has a neutral reaction, and Tailwind CSS is a compelling alternative. BEM seems to be the most relevant naming convention.</description></item><item><title>Migrating From WordPress to Hugo</title><link>https://dfar.io/posts/migrating-from-wordpress-to-hugo/</link><pubDate>Thu, 03 Dec 2020 19:10:30 -0500</pubDate><guid>https://dfar.io/posts/migrating-from-wordpress-to-hugo/</guid><description>I decided to clean up my website and move to a static site for a few reasons:
Start using MarkDown more frequently, as I&amp;rsquo;ve grown to really like it for documentation. Cut down on costs of hosting the WordPress site. Simplify the overall design. In the migration process, I had to do a few things to get the site fully migrated over.
Deploying to Github Pages using Github Actions First, I created the Hugo site by following the Quick Start Guide at Hugo, picking a theme, then committing the changes to my Github in a repo named .</description></item><item><title>Sending Azure App Service .NET Core Logs to Graylog</title><link>https://dfar.io/sending-azure-app-service-net-core-logs-to-graylog/</link><pubDate>Mon, 23 Nov 2020 18:09:25 +0000</pubDate><guid>https://dfar.io/sending-azure-app-service-net-core-logs-to-graylog/</guid><description>Pre-requisites You’ll need:
A Graylog instance running to send logs to, which should be running a GELF UDP input. A .NET Core application to send logs from. An Azure App Service to host the above application. Procedure First, add the following packages to your application:
Serilog.AspNetCore Serilog.Sinks.Graylog Next, add the following to Program.cs, at the bottom of the CreateDefaultBuilder method:
Next, configure the appsettings.jsonfile, cleaning the existing Logging config and adding the following:</description></item><item><title>Running Multi-Store NopCommerce Locally</title><link>https://dfar.io/running-multi-store-nopcommerce-locally/</link><pubDate>Tue, 10 Nov 2020 17:31:33 +0000</pubDate><guid>https://dfar.io/running-multi-store-nopcommerce-locally/</guid><description>To run NopCommerce locally, you’ll need to set up a few things.
First, make an entry in your hosts file for each of the different stores, like so:
127.0.0.1 store1.local 127.0.0.1 store2.local Then inside your store settings, set the following for each store: https://dfar.io/wp-content/uploads/2020/11/image-1024x197.png
Finally, check that you can access the stores using the store URL provided.</description></item><item><title>Automatically Clean Artifactory Artifacts</title><link>https://dfar.io/automatically-clean-artifactory-artifacts/</link><pubDate>Tue, 14 Jul 2020 14:24:59 +0000</pubDate><guid>https://dfar.io/automatically-clean-artifactory-artifacts/</guid><description>If you’re running into issues with artifacts taking up too much space on your Artifactory server, this will set you up with a programmatic way to clean old artifacts as they are no longer required.
Install ArtifactCleanup Plugin SSH into the Artifactory server, go into the $JFROG_HOME/etc/plugins directory and run the following to download the Artifact Cleanup plugin:
Make changes to the artifactCleanup.json file based on desired behavior.
To enable logging, add the following to $ARTIFACTORY_HOME/etc/logback.</description></item><item><title>Access Artifactory Securely with Kubernetes</title><link>https://dfar.io/access-artifactory-securely-with-kubernetes/</link><pubDate>Tue, 30 Jun 2020 18:17:53 +0000</pubDate><guid>https://dfar.io/access-artifactory-securely-with-kubernetes/</guid><description>To allow Kubernetes to download images from a secured Artifactory instance (for example, an instance that doesn’t allow anonymous access):
Artifactory User Setup Create a user in Artifactory to serve as the service principal. Log into this user and create an API token. Docker Credentials With the API token, log into the Docker instance (username is service account username, password is API key):
Once logged in successfully, access the config.</description></item><item><title>Restricting Access to App Services and Function Apps</title><link>https://dfar.io/restricting-access-to-app-services-and-function-apps/</link><pubDate>Fri, 19 Jun 2020 13:20:13 +0000</pubDate><guid>https://dfar.io/restricting-access-to-app-services-and-function-apps/</guid><description>Restrict By Function Restriction by function works well since it gives you granular control over functions. An appropriate application would be giving the key to other applications, and then having those applications use the key to access.
There are three levels to restrict a function:
Anonymous – no restrictions Function – restricted by an individual function key Admin – uses the admin key defined in the function app When calling the function, there are two ways to do so, using either a query string:</description></item><item><title>Connecting An Azure Function App to Loggly</title><link>https://dfar.io/connecting-an-azure-function-app-to-loggly/</link><pubDate>Tue, 16 Jun 2020 00:53:43 +0000</pubDate><guid>https://dfar.io/connecting-an-azure-function-app-to-loggly/</guid><description>Doing the following will get a Function App hooked up to Loggly.
Create an Event Hub namespace, and an Event Hub. Create a Function App, and an Event Hub function. Create a Loggly HTTP/S Event Endpoint, and get the URL endpoint. Update the Event Hub trigger with this code(use test to verify) Create a HTTP Trigger function. In the Function App’s diagnostic settings, turn on FunctionAppLogs and stream to the Event Hub.</description></item><item><title>Creating an Angular and Azure Function API App with Azure Static Web App</title><link>https://dfar.io/creating-an-angular-and-azure-function-api-app-with-azure-static-web-app/</link><pubDate>Wed, 27 May 2020 01:12:28 +0000</pubDate><guid>https://dfar.io/creating-an-angular-and-azure-function-api-app-with-azure-static-web-app/</guid><description>Recently, Azure released Azure Static Web Apps, which looks like a way to host static web sites easily. Some of the perks I see immediately are:
Works well with SPA technologies (Angular, React, Vue) Serve an API using Azure Functions Automatic integration with GitHub and GitHub Actions to deploy immediately Currently costs nothing (while this is in preview) Pre-requisites To get started, you’ll need:
Angular CLI Azure Functions Core Tools An Azure account Create a GitHub Repo with Angular and Azure Function Apps First, create a repo in your GitHub account, and clone that repo to your local PC.</description></item><item><title>Adding Settings to a Plugin in NopCommerce (pre-4.00)</title><link>https://dfar.io/adding-settings-to-a-plugin-in-nopcommerce-pre-4-00/</link><pubDate>Thu, 30 Apr 2020 13:00:34 +0000</pubDate><guid>https://dfar.io/adding-settings-to-a-plugin-in-nopcommerce-pre-4-00/</guid><description>Once you’re created a plugin for NopCommerce, you’ll likely want to add the ability to configure settings inside the plugin for reference later.
When adding this capability, we’re going to work on trying to make this as immutable as possible, to follow functional programming as best we can, just because it makes things a little cleaner and puts all of the conversion between the configuration model and settings object.
Locale Keys First, we’ll set up a class called MyPluginLocaleKeys.</description></item><item><title>Book Notes – Why Zebras Don’t Get Ulcers</title><link>https://dfar.io/book-notes-why-zebras-dont-get-ulcers/</link><pubDate>Tue, 28 Apr 2020 02:16:08 +0000</pubDate><guid>https://dfar.io/book-notes-why-zebras-dont-get-ulcers/</guid><description>Pretty interesting read that goes into the details on how stress affects us as we’re generally in situations that generate chronic stress (as opposed to wildlife, that deals with acute stress). The big takeaways:
Stress-related sickness comes from the basic fact that we have our stress-response (response to stressor to return to homeostatis) turned on continually, as opposed to in the appropriate fight-or-flight situations. Provides an aversion to Hans Seyle’s 3 part of stress, General Adaptation Principle: Alarm – stressor, initial reaction, flight or flight Resistance – stress-response, attempted recovery to homeostatis Exhaustion – the point where the stress-response becomes more harmful than the stressor (as opposed to the stressor causing exhaustion) The opposite of love is not hate – it’s indifference.</description></item><item><title>Recording HTTP Request Body with Java, Spring Boot and Application Insights</title><link>https://dfar.io/recording-http-request-body-with-java-spring-boot-and-application-insights/</link><pubDate>Thu, 23 Apr 2020 14:23:23 +0000</pubDate><guid>https://dfar.io/recording-http-request-body-with-java-spring-boot-and-application-insights/</guid><description>Building off of my previous post about integrating App Insights into Spring Boot, I also wanted to record the request body in each trace sent to Azure. This is especially useful when looking up failures, since you’ll be able to see the request body used that caused the failure.
Important Note Regarding Privacy Before getting started, something to consider is the issue of privacy – by activating this, you’ll be storing request body information into Azure, which can be an issue if you’re dealing with sensitive information.</description></item><item><title>Integrate Application Insights into a Spring Boot Application</title><link>https://dfar.io/integrate-application-insights-into-a-spring-boot-application/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://dfar.io/integrate-application-insights-into-a-spring-boot-application/</guid><description>To get started, we’ll set up a basic Spring Boot application, and then add Application Insights in the next step.
Creating a Skeleton Spring Boot App To get started, go to Spring Boot Initializrand create an app with the following selected:
Create a gradle project Add the Spring Web dependency Once that’s done, extract the archive file given and open in your Java IDE of choice (IntelliJ, for example).</description></item><item><title>Developing with nopCommerce using VSCode and Linux</title><link>https://dfar.io/developing-with-nopcommerce-using-vscode-and-linux/</link><pubDate>Tue, 21 Apr 2020 15:59:00 +0000</pubDate><guid>https://dfar.io/developing-with-nopcommerce-using-vscode-and-linux/</guid><description>Pre-requisites To get started, you’ll need to set up:
VSCode with the C# and vscode-solution-explorer extensions installed SQL Server dotnet SDK The library libgdiplus to run RoxyFileman. Download and Build nopCommerce Source Code To get started, get a copy of the nopCommerce source code at their Github page.
After downloading the source code, open the /src folder using VSCode.
For cleaning and building the project, you have two choices:</description></item><item><title>Setting up SQL Server in Arch Linux</title><link>https://dfar.io/setting-up-sql-server-in-arch-linux/</link><pubDate>Tue, 21 Apr 2020 14:49:05 +0000</pubDate><guid>https://dfar.io/setting-up-sql-server-in-arch-linux/</guid><description>First, install the AUR packages provided for installation:
Once installed, perform the configuration:
Once configured, there are a few ways to access the database:
Using the sqlcmd command line tool. Using the VSCode mssql extension. Using Azure Data Studio.</description></item><item><title>Setting up A Jitsi Meet Server on Azure</title><link>https://dfar.io/setting-up-a-jitsi-meet-server-on-azure/</link><pubDate>Sat, 11 Apr 2020 19:01:39 +0000</pubDate><guid>https://dfar.io/setting-up-a-jitsi-meet-server-on-azure/</guid><description>With the COVID-19 pandemic going on, video chat is on the rise, with people using tools like Zoom, WebEx, and others. One option is to use an open-source solution like Jitsi Meet, which provides both a public cloud version you can use easily, and a version you can host on your own.
Why host on your own? You should consider hosting on your own if:
You’re concerned with security – hosting the software on your own ensures a third part is uninvolved.</description></item><item><title>Adding a Custom Method to a nopCommerce Core Service in a Plugin</title><link>https://dfar.io/adding-a-method-to-a-nopcommerce-core-service-in-a-plugin/</link><pubDate>Wed, 08 Apr 2020 18:28:18 +0000</pubDate><guid>https://dfar.io/adding-a-method-to-a-nopcommerce-core-service-in-a-plugin/</guid><description>In nopCommerce, you can extend a core service to include a new method and new functionality using both dependency injection and inheritance. For this example, we’ll use TaxService provided in Nop.Services.
Implementation First, create a new interface in your plugin that inherits from the core service interface:
After creating the interface, create the implementation class, inheriting from both the newly created interface and the base service:
Finally, make sure to connect the interface to the implementation in your plugin’s DependencyRegistrar.</description></item><item><title>Book Notes – Digital Minimalism</title><link>https://dfar.io/book-notes-digital-minimalism/</link><pubDate>Mon, 06 Apr 2020 16:39:05 +0000</pubDate><guid>https://dfar.io/book-notes-digital-minimalism/</guid><description>Digital Minimalism by Cal Newportlays out the benefits and then steps of using a more deliberate approach of selecting technology that benefits oneself. This book shares the same writing tone of Deep Work, providing a lot of examples for the different principles explained in the book.
Digital Minimalism is defined as “a philosophy of technology use in which you focus your online time on a small number of carefully selected and optimized activities that strongly support things you value, and then happily miss out on everything else.</description></item><item><title>Book Notes – The Shallows (What the Internet is Doing to Our Brains)</title><link>https://dfar.io/book-notes-the-shallows-what-the-internet-is-doing-to-our-brains/</link><pubDate>Wed, 01 Apr 2020 17:23:17 +0000</pubDate><guid>https://dfar.io/book-notes-the-shallows-what-the-internet-is-doing-to-our-brains/</guid><description>The premise of the book is that as we move into integrating the Internet into our lives more and more, we are shifting from thinking deeply and creatively on topics, to learning quickly on a surface level.
Brain Plasticity The brain is capable of being rewired and redeveloped through-out the entirety of a human life – even if that ability slows down in age. This applies in many cases such as the loss of capabilities (blindness, loss of limb, etc.</description></item><item><title>Book Notes – Deep Work by Cal Newport</title><link>https://dfar.io/book-notes-deep-work-by-cal-newport/</link><pubDate>Tue, 10 Mar 2020 22:29:39 +0000</pubDate><guid>https://dfar.io/book-notes-deep-work-by-cal-newport/</guid><description>Pretty good read overall – a lot of this is speaking to the choir with me in terms of the idea of working deeply on things, and applying focus. For someone not familiar with the benefits of something like deep work, it makes for a good explanation, and for someone already familiar, it provides some exercises and things to figure out the important things to work on.
By the time I read this, I was already doing a few of these things, like scheduling all of my time on a calendar, and weighing everything on a pro/con list.</description></item><item><title>Set up nopCommerce 4.2 on a Linux Azure VM</title><link>https://dfar.io/set-up-nopcommerce-4-2-on-a-linux-azure-vm/</link><pubDate>Mon, 09 Mar 2020 18:50:55 +0000</pubDate><guid>https://dfar.io/set-up-nopcommerce-4-2-on-a-linux-azure-vm/</guid><description>Infrastructure Setup First, create a Ubuntu-based VM, opening ports 80, 443, and 22.
Afterwards, create an Azure SQL Database.
VM Configuration Once all of the infrastructure is created, set up a DNS record for the public IP created for the VM to make access easier.
Next, SSH into the VM using the domain name created above. Run the following commands to install the .NET Core runtime and SDK:
Next, install and enable nginx:</description></item><item><title>Set up Auto-Renewing Let’s Encrypt Certificates on App Service Linux</title><link>https://dfar.io/set-up-auto-renewing-lets-encrypt-certificates-on-app-service-linux/</link><pubDate>Mon, 09 Mar 2020 13:23:15 +0000</pubDate><guid>https://dfar.io/set-up-auto-renewing-lets-encrypt-certificates-on-app-service-linux/</guid><description>Set up the ability to assign auto-renewing Let’s Encrypt certs to an Azure App Service Linux instance with shibayan’s appservice-acmebot. This will create a Function App that automatically updates the App Service as needed.
Before getting started, you’ll need to have a few things:
An Azure App Service (Linux-based). DNS records being served using Azure DNS. Procedure First, deploy the solutionto your Azure subscription. Use the following for configation:</description></item><item><title>Quickly Work With Graylog Streams Using the API</title><link>https://dfar.io/quickly-work-with-graylog-streams-using-the-api/</link><pubDate>Fri, 28 Feb 2020 17:09:47 +0000</pubDate><guid>https://dfar.io/quickly-work-with-graylog-streams-using-the-api/</guid><description>When using Graylog, you may run into a case where you’re making a large number of streams to organize data. A quick way to do this is to use the API to programmatically add the streams to the system quickly.
Authorization For authorization, you can use Basic Auth with your username and password.
You can also create an access token to allow access for individual systems.
Interact with API Use the GET endpoint to get the streams payload:</description></item><item><title>Set up nopCommerce on an Azure VM</title><link>https://dfar.io/set-up-nopcommerce-on-an-azure-vm/</link><pubDate>Fri, 28 Feb 2020 01:51:07 +0000</pubDate><guid>https://dfar.io/set-up-nopcommerce-on-an-azure-vm/</guid><description>Setting up the VM and Deploying https://docs.nopcommerce.com/developer/tutorials/azure-publish.html
Setting up Let’s Encrypt HTTPS https://weblog.west-wind.com/posts/2016/feb/22/using-lets-encrypt-with-iis-on-windows</description></item><item><title>Setting up my Android Device</title><link>https://dfar.io/setting-up-my-android-device/</link><pubDate>Thu, 27 Feb 2020 01:59:30 +0000</pubDate><guid>https://dfar.io/setting-up-my-android-device/</guid><description>Initial Setup First, go through the default setup, connecting to Wi-Fi and Google.
Turn off backup to Google Drive.
Set up all of the methods of accessing phone (face recognition, etc.)
Configuration Turn on night mode. Set resolution to max. Set navigation bar to full screen gestures Show battery percentage Set sound mode to vibrate Turn off Bixby home.
Install the following apps from the Play Store:
Outlook (login, turn off notifs, swipe right delete, turn off focused inbox, week start Monday, set calendar widget) Firefox (sign in) Messenger (sign in, turn on dark mode, turn off chat bubbles) Dropbox (sign in) Instagram (sign in) Netflix (sign in) YNAB (sign in) Slack (sign in) Fly Delta (sign in) Ecobee (sign in) Fi (sign in) Fitbit (sign in) WhatsApp (sign in, turn off notifs) Configure the following:</description></item><item><title>Moving Resources to a Different Azure Tenant</title><link>https://dfar.io/moving-resources-to-a-different-azure-tenant/</link><pubDate>Sat, 22 Feb 2020 19:11:10 +0000</pubDate><guid>https://dfar.io/moving-resources-to-a-different-azure-tenant/</guid><description>Let’s say you have some resources in your Azure tenant that you want to move to a different tenant (such as if you’re going to transfer ownership of a particular set of resources to another company). You can do that with the following steps:
Move Existing Resources to A New Subscription Create a new subscription in your current tenant as the current account admin (use your own information, which you will change over later so you can be an Account Admin).</description></item><item><title>Upgrading nopCommerce</title><link>https://dfar.io/upgrading-nopcommerce/</link><pubDate>Fri, 21 Feb 2020 14:37:19 +0000</pubDate><guid>https://dfar.io/upgrading-nopcommerce/</guid><description>Upgrading nopCommerce is a manual process that requires a decent amonut to work to get in place. When upgrading, you’ll need to upgrade sequentially (3.80 -&amp;gt; 3.90 -&amp;gt; 4.00 -&amp;gt; etc.).
NOTE: When performing this process on a live site, make sure to close the store during the upgrade process so no changes occur on the site during upgrade.
Upgrade Database First, you’ll need to upgrade the database using a script provided by nopCommerce.</description></item><item><title>Setting up Graylog in Azure</title><link>https://dfar.io/setting-up-graylog-in-azure/</link><pubDate>Thu, 20 Feb 2020 19:58:22 +0000</pubDate><guid>https://dfar.io/setting-up-graylog-in-azure/</guid><description>To get started with installing Graylog, do the following:
Create a VM using the following:
Image: Ubuntu 18.04 LTS Minimum Size: B2s (~$30/month) Open ports 80,443,22 SSH into the server and follow this guide to get Graylog installed.
To set up public access, set the following variables in Graylog config file:
http_bind_address = PRIVATE_IP http_external_uri = http://&amp;lt;PUBLIC_IP&amp;gt; Once fully installed, set up an Apache reverse proxy:
sudo apt-get install apache2 -y sudo a2enmod proxy_http proxy_ajp rewrite deflate headers proxy_balancer proxy_connect proxy_html ssl lbmethod_byrequests slotmem_shm proxy Edit /etc/apache2/sites-enabled/000-default.</description></item><item><title>Setting up ELK in Azure with Bitnami</title><link>https://dfar.io/setting-up-elk-in-azure-with-bitnami/</link><pubDate>Thu, 20 Feb 2020 16:49:49 +0000</pubDate><guid>https://dfar.io/setting-up-elk-in-azure-with-bitnami/</guid><description>To get started with using ELk in Azure, do the following:
Create a VM using the ‘ELK Certified by Bitnami‘ image.
Next, you’ll need to get the credentials to log into the application – look into the serial log of Boot Diagnostics of the VM to access the username and password. If needed, a guide is available.
Access the public IP of the VM created, and log in using the credentials above.</description></item><item><title>Upgrading PHP in Ubuntu</title><link>https://dfar.io/upgrading-php-in-ubuntu/</link><pubDate>Fri, 14 Feb 2020 17:51:38 +0000</pubDate><guid>https://dfar.io/upgrading-php-in-ubuntu/</guid><description>Before doing this, I recommend backing up your system, in case things go wrong.
To upgrade to the latest version of PHP in Ubuntu, first, update the system:
Then add the third-party repository:
Finally, upgrade PHP to the latest version:
If upgrading PHP for WordPress, you’ll need a few more modules:
If using Apache, you’ll need to set the correct PHP version:</description></item><item><title>Using Azure Storage to Backup Data</title><link>https://dfar.io/using-azure-storage-to-backup-data/</link><pubDate>Tue, 11 Feb 2020 14:06:46 +0000</pubDate><guid>https://dfar.io/using-azure-storage-to-backup-data/</guid><description>If you’re looking for an easy and cheap way to back up infrequently used data, you can set up a storage account in Azure with the following settings:
Location: closest to your location. Performance: Standard. Account Kind: BlobStorage Replication: Locally-redundant storage Access tier: Cool After the storage account is created, you can upload your compressed files (suggested to maximize efficiency) to containers inside the storage account.
Once the files are uploaded, you have the option to change to the Archive access tier, which is useful for files you don’t plan on accessing frequently.</description></item><item><title>Test Disk I/O Benchmarks in Linux</title><link>https://dfar.io/test-disk-i-o-benchmarks-in-linux/</link><pubDate>Fri, 07 Feb 2020 22:16:45 +0000</pubDate><guid>https://dfar.io/test-disk-i-o-benchmarks-in-linux/</guid><description>To test read/write speeds of a drive in Linux, you can run dd to check write speed:
and read speed (need to clear cache beforehand to get an accurate reading, read more):
Should get a result like the following for write speed:and read speed:</description></item><item><title>Forcing Delete of Azure Recovery Services Vault</title><link>https://dfar.io/forcing-delete-of-azure-recovery-services-vault/</link><pubDate>Wed, 05 Feb 2020 16:07:17 +0000</pubDate><guid>https://dfar.io/forcing-delete-of-azure-recovery-services-vault/</guid><description>When trying to delete a Recovery Services vault, you can run into issues with trying to actually delete the vault from the tenant – to solve this issue, you’ll have to use the CLI and Azure CLI to do this.
Before starting, make sure to disable soft delete within the vault as well, and then delete any currently existing soft delete items.</description></item><item><title>Setting Up Ubuntu</title><link>https://dfar.io/setting-up-ubuntu/</link><pubDate>Wed, 05 Feb 2020 15:34:24 +0000</pubDate><guid>https://dfar.io/setting-up-ubuntu/</guid><description>Recently switched over to using Ubuntu from Windows due to having some issues with running Windows 10 on the desktop. Here’s a quick guide on what I did to get everything set up.
Installation Pretty simple, just set up a USB stick with Ubuntu on it. When install, using the following configurations:
Minimal installation Install third party tools (save time later) Once the installation completes, I make sure to set up the display correctly for monitors, including:</description></item><item><title>Setting Up WordPress With An Azure VM</title><link>https://dfar.io/setting-up-wordpress-with-an-azure-vm/</link><pubDate>Sun, 02 Feb 2020 02:01:29 +0000</pubDate><guid>https://dfar.io/setting-up-wordpress-with-an-azure-vm/</guid><description>This guide will walk though setting up a WordPress site using an Azure VM. Some of the perks of doing this are:
Cost-wise, you can spend as little as ~$8 a month to get a fully functional WordPress site running. If you try using MySQL and App Services in Azure, you’ll looking to spend ~$40 a month for worse specs. You can scale the site up as needed if performance demands arise.</description></item><item><title>Notes on Asperger Syndrome and Long-Term Relationships</title><link>https://dfar.io/notes-on-asperger-syndrome-and-long-term-relationships/</link><pubDate>Mon, 20 Jan 2020 02:17:35 +0000</pubDate><guid>https://dfar.io/notes-on-asperger-syndrome-and-long-term-relationships/</guid><description>This is an old read, decided to go through and skim it again to see if any of my thoughts have changed over time – I found that a lot of the things I highlighted from before, no longer apply. Maybe over time, things have just improved.
As I read this, I think about how a lot of the things mentioned about those with mild autism exhibit traits like:
Preference for structure Depth over variety Difficulty in social situations A lot of these things sound like something an introverted person would prefer.</description></item><item><title>Book Notes – Predictably Irrational</title><link>https://dfar.io/book-notes-predictably-irrational/</link><pubDate>Sun, 19 Jan 2020 01:21:18 +0000</pubDate><guid>https://dfar.io/book-notes-predictably-irrational/</guid><description>Pretty good and interesting read overall – mostly touches on some of the repeatable unusual things in human behavior. Definitely worth the read. Some of the notes:
We judge value on things based on the context of other things around it – making it difficult to judge the value of something absolutely. Question your repeated behaviors – and make sure they aren’t just happening out of habit (ex. getting a regular coffee, do you need to get it)?</description></item><item><title>Book Notes – The Total Money Makeover</title><link>https://dfar.io/book-notes-the-total-money-makeover/</link><pubDate>Wed, 15 Jan 2020 16:19:37 +0000</pubDate><guid>https://dfar.io/book-notes-the-total-money-makeover/</guid><description>Over the last few days, I decided to re-read Dave Ramsey’s The Total Money Makeover just to skim it and go through anything I might have missed. I read this book about 8 years ago when finances were more tight, and a lot of the information is pretty helpful.
The takeaway I got after reading a second time was that this book works well for someone that doesn’t have much of an idea on how to handle finances.</description></item><item><title>Cleaning up Customer Data in nopCommerce</title><link>https://dfar.io/cleaning-up-customer-data-in-nopcommerce/</link><pubDate>Tue, 14 Jan 2020 20:25:14 +0000</pubDate><guid>https://dfar.io/cleaning-up-customer-data-in-nopcommerce/</guid><description>Going through a nopCommerce project with a 40GB database, I found the majority of the space was allotted to a very large Customer table. To fix this, I decided to delete Customer data with the following criteria:
No username, email, and password data Not a system account Doesn’t reference a Shipping and Billing address Last activity recorded a month from today’s date I considered the customers having shopping cart items as well, but found that most of the junk data had one shopping cart item – I think this comes from a robot regularly adding specific items to a cart to check price.</description></item><item><title>Setting up a SonarQube Server in Azure</title><link>https://dfar.io/setting-up-a-sonarqube-server-in-azure/</link><pubDate>Thu, 09 Jan 2020 16:39:23 +0000</pubDate><guid>https://dfar.io/setting-up-a-sonarqube-server-in-azure/</guid><description>To get started with using SonarQube in Azure, do the following.
Create a virtual machine with the Standard B2s (~$30/month) size or larger.
SSH into the server and download all pre-reqs:
Create a non-root user:
Download and unzip SonarQube (you can get the wget URL from the Downloads page):
Then start it using the following as the non-root user:
Wait for the text SonarQube is up and then verify access at IP_ADDRESS:9000 (you can log in with admin/admin).</description></item><item><title>Installing Redux Into Typescript Create React App</title><link>https://dfar.io/installing-redux-into-typescript-create-react-app/</link><pubDate>Sun, 22 Dec 2019 22:49:04 +0000</pubDate><guid>https://dfar.io/installing-redux-into-typescript-create-react-app/</guid><description>To install Redux into an app created with Create React App that’s using Typescript, run the following to install:
Optionally, you can also install the following to allow for both:
Warning in case of state mutation. Connecting to the app using Redux DevTools.</description></item><item><title>Enable Routing in Typescript Create React App</title><link>https://dfar.io/enable-routing-in-typescript-create-react-app/</link><pubDate>Sat, 21 Dec 2019 22:48:58 +0000</pubDate><guid>https://dfar.io/enable-routing-in-typescript-create-react-app/</guid><description>When working with Create React App using the Typescript configuration, there’s a slight change to be made to set up the ability to perform routing.
Install the following into your project:
After that’s done, use the content in the Example Pagein your App.tsx file. You should be able to change between pages using the URL as reference.
Reference:
https://create-react-app.dev/docs/adding-a-router/</description></item><item><title>Formatting Dates in Create React App with MomentJS</title><link>https://dfar.io/adding-moment-js-to-create-react-app/</link><pubDate>Sat, 21 Dec 2019 20:32:14 +0000</pubDate><guid>https://dfar.io/adding-moment-js-to-create-react-app/</guid><description>While working with React, I found I wanted a way to work with dates similiar to the way Angular uses the DatePipe to handle displaying dates correctly. The answer is in using the momentjs library.
To do so, add the package to your project:
Then add the following code to test in one of your .js or .tsx files:
You should see an ISO string being displayed. To check on ways you can use the library, check the docs on the page above.</description></item><item><title>Book Notes – Hackers &amp; Painters</title><link>https://dfar.io/book-notes-hackers-painters/</link><pubDate>Tue, 17 Dec 2019 13:08:45 +0000</pubDate><guid>https://dfar.io/book-notes-hackers-painters/</guid><description>This is a book written almost 15 years ago that makes some comparison to the workstyle painters has and how it correlates to programming. A case study is shown about Viacom, one of the first pieces of software to be served via server side code.
A lot of the ideas presented in this book talks about the perks of serving applications via the web, which is common today. Also, a lot of promotion towards using Lisp.</description></item><item><title>Book Notes – Squat Every Day by Matt Perryman</title><link>https://dfar.io/book-notes-squat-every-day/</link><pubDate>Mon, 16 Dec 2019 12:29:07 +0000</pubDate><guid>https://dfar.io/book-notes-squat-every-day/</guid><description>Wanted to try writing some notes to recap some of the books I’ve been reading as a means to rehash the knowledge and have a means to understand what I read, as well as have a reference if I need to look back later.
Squat Every Dayby Matt Perryman provides a training philosophy around frequent training over the standard minimalist high intensity training used by many strength athletes.
His approach looks closer to what I’ve seen in high level weightlifting as opposed to powerlifting.</description></item><item><title>Debugging Issues With cert-manager</title><link>https://dfar.io/debugging-issues-with-cert-manager/</link><pubDate>Thu, 05 Dec 2019 15:07:24 +0000</pubDate><guid>https://dfar.io/debugging-issues-with-cert-manager/</guid><description>If you’re using cert-manager to get a Let’s Encrypt certificate for your Kubernetes cluster and running into issues, you can do the following to see what might be going on:
Check Status of Challenge First, check the status of the certificate:
You’ll see something that says something like Created new CertificateRequest resource “tls-secret-1764787185”. Run the following to get more information:
This command will provide the ID of an order, so use a similiar command:</description></item><item><title>Upgrading a NopCommerce Plugin from 3.80 To 4.00</title><link>https://dfar.io/upgrading-a-nopcommerce-plugin-from-3-80-to-4-00/</link><pubDate>Mon, 02 Dec 2019 16:11:22 +0000</pubDate><guid>https://dfar.io/upgrading-a-nopcommerce-plugin-from-3-80-to-4-00/</guid><description>When upgrading nopCommerce, you’ll need to also get the latest versions of plugins to go alongside the nopCommerce installation. Depending on the upgrade, you may need to make some minor changes to the plugin to get it working.
In particular, 3.80 -&amp;gt; 4.00 marks the transition to .NET Core, meaning there are some significant changes to make.
Upgrade the .csproj File To start, you’ll want to upgrade the .csproj file of the project.</description></item><item><title>Ripping DVDs using Handbrake</title><link>https://dfar.io/ripping-dvds-using-handbrake/</link><pubDate>Sun, 01 Dec 2019 01:00:11 +0000</pubDate><guid>https://dfar.io/ripping-dvds-using-handbrake/</guid><description>To rip DVDs, first do the following:
Download HandBrake Download libdvdcss2and place the DLL into the Handbrake directory After the above is done, open Handbrake and open the DVD as a source. It’ll take a long time to load the data in place, and then you’ll have the ability to select different chapters to rip.
Select the desired title to rip and click ‘Encode’. After the process completes, you’ll be able to view the video.</description></item><item><title>Setting up nopCommerce 4.00+ For Use With VSCode</title><link>https://dfar.io/setting-up-nopcommerce-4-00-for-use-with-vscode/</link><pubDate>Wed, 27 Nov 2019 15:20:51 +0000</pubDate><guid>https://dfar.io/setting-up-nopcommerce-4-00-for-use-with-vscode/</guid><description>To get started with using nopCommerce and VSCode together, you’ll need to have the following:
VSCodeinstalled. The C# extension installed alongside VSCode. .NET Core 3.0 SDK If running nopCommerce 4.00, .NET Framework v4.6.1 Developer Pack Quick Start Download the nopCommerce sourceand copy the contents to a folder on your PC. Open the folder using VSCode. If you’re running nopCommerce 4.00, apply the changes from this commit. Run dotnet restore to get all dependencies required for running locally.</description></item><item><title>Create An Admin in nopCommerce With Only Database Access</title><link>https://dfar.io/create-an-admin-in-nopcommerce-with-only-database-access/</link><pubDate>Tue, 26 Nov 2019 14:22:24 +0000</pubDate><guid>https://dfar.io/create-an-admin-in-nopcommerce-with-only-database-access/</guid><description>If you only have access to a database for nopCommerce (for example, if you’ve accidentally locked yourself out), here’s a way to create an administrator with access to the database and access to the frontend.
First, register a new user using the standard registration process. Once that’s done, run the following SQL query on the database to assign administrator rights:</description></item><item><title>Automatically Apply EF Core Database Migrations in Azure Function App on Startup</title><link>https://dfar.io/automatically-apply-ef-core-database-migrations-in-azure-function-app-on-startup/</link><pubDate>Tue, 19 Nov 2019 18:04:49 +0000</pubDate><guid>https://dfar.io/automatically-apply-ef-core-database-migrations-in-azure-function-app-on-startup/</guid><description>To apply database migrations to an Azure Function app on startup, you’ll need to have the following set up first:
Entity Framework in Azure Functions Once the above is set up, you can set up the application to apply all migrations on startup, making for a link between the running application and the database it is dependent on. This is especially useful for local development – as you won’t run into cases where a local schema is outdated.</description></item><item><title>Checking Validity of a Private Key, CSR and Certificate</title><link>https://dfar.io/checking-validity-of-a-private-key-csr-and-certificate/</link><pubDate>Mon, 18 Nov 2019 14:54:55 +0000</pubDate><guid>https://dfar.io/checking-validity-of-a-private-key-csr-and-certificate/</guid><description>If you’re working with a certificate and need a means to check if the combination of the private key, CSR and certificate are all matching, you can run the following OpenSSL commands:
To check the private key:
openssl rsa -modulus -noout -in YOUR_KEY.pem | openssl md5
To check the CSR:
openssl req -noout -modulus -in YOUR_CSR.csr | openssl md5
To check the certificate:
openssl x509 -modulus -noout -in CERTIFICATE.crt | openssl md5</description></item><item><title>Copying a nopCommerce Environment</title><link>https://dfar.io/copying-a-nopcommerce-environment/</link><pubDate>Tue, 12 Nov 2019 20:57:03 +0000</pubDate><guid>https://dfar.io/copying-a-nopcommerce-environment/</guid><description>Copying a nopCommerce environment to a destination such as your local machine or to another environment requires two major steps:
Copying the database Cloning the source code and configuring to use the copied database Copy The Database Using SSMS, log in to the source database server using administrative credentials (usually the remote environment). On source database server, right-click on database and click Tasks -&amp;gt; Export Data-tier Application Save the .</description></item><item><title>Converting nopCommerce to Store Images In Filesystem Instead of Database</title><link>https://dfar.io/converting-nopcommerce-to-store-images-in-filesystem-instead-of-database/</link><pubDate>Tue, 12 Nov 2019 19:27:25 +0000</pubDate><guid>https://dfar.io/converting-nopcommerce-to-store-images-in-filesystem-instead-of-database/</guid><description>By default, nopCommerce stores all of the images in the database, making for simple access. However, with a lot of images, this puts a lot of load on the database, alongside making for a larger database to maintain.
Someresearchshows that the performance doesnt differ greatly between the two options, but here’s a few reasons you might use either:
Storing in Database Allows for easier backups &amp;amp; environment clones (only need to clone codebase and DB) Single place for image storage (useful with multiple systems) Storing on Fileserver Separates large portion of data from DB (allows for smaller DB) Lowers load on DB server.</description></item><item><title>Set up Pi-Hole to Block Ads at the Network Level</title><link>https://dfar.io/set-up-pi-hole-to-block-ads-at-the-network-level/</link><pubDate>Thu, 31 Oct 2019 19:45:47 +0000</pubDate><guid>https://dfar.io/set-up-pi-hole-to-block-ads-at-the-network-level/</guid><description>You can use a Respberry Pi to block all ads coming in at a DNS level
Requirements:
CanaKit (provides Raspberry Pi, Power Supply) Short ethernet cable Monitor and keyboard for initial setup Raspberry Pi Initial Installation and Configuration Assemble and then plug in the Raspberry Pi, which should take you to the NOOBS setup window.
Install Raspbian, and work through until you get to the desktop screen for the Raspberry Pi.</description></item><item><title>Changing Default Token Expiration for Azure AD</title><link>https://dfar.io/changing-default-token-expiration-for-azure-ad/</link><pubDate>Thu, 31 Oct 2019 17:56:44 +0000</pubDate><guid>https://dfar.io/changing-default-token-expiration-for-azure-ad/</guid><description>To change the default token expiration timeframe when using Azure AD for authentication, you can do the following.
First, if you haven’t yet, install the AzureADPreview PowerShell Module:
Now, connect to Azure AD using an account that has access to manage App Registrations:
After that, check and delete any policies that currently exist
After that, create a new policy (this one is set for 30 minutes as an example):
And apply that policy to the service principal tied to the Azure AD integration:</description></item><item><title>Converting P7B Certificates into PFX Certificates</title><link>https://dfar.io/converting-p7b-certificates-into-pfx-certificates/</link><pubDate>Thu, 31 Oct 2019 14:40:55 +0000</pubDate><guid>https://dfar.io/converting-p7b-certificates-into-pfx-certificates/</guid><description>To convert a P7B certificate into a PFX certificate, you’ll need the following:
The .p7b certificate created after the CSR is generated. The private key (likely .pem or .key) generated when generating the CSR. First, doublr click the .p7b file and export out all of the certs that appear in Certificate Manager as Base64 encoded .CER files:Once this is done, you’ll be able to create the .PFX file with the following openssl command:</description></item><item><title>Generating CSRs the Easy Way In Windows</title><link>https://dfar.io/generating-csrs-the-easy-way-in-windows/</link><pubDate>Mon, 28 Oct 2019 15:48:24 +0000</pubDate><guid>https://dfar.io/generating-csrs-the-easy-way-in-windows/</guid><description>First, download the DigiCert Certificate Utility.
Afterwards, click on “Create CSR”, and fill out the appropriate information to generate the CSR.
Accessing the Private Key for the CSR When a CSR is generated, there is a private key that associates with the CSR (and eventual certificate). You can access this in certmgr.exe:To get the private key, go to ‘All Tasks’ -&amp;gt; ‘Export’ and export the private key as needed. Windows will export it as a .</description></item><item><title>Adding Icons to an Angular Web Site</title><link>https://dfar.io/adding-icons-to-an-angular-web-site/</link><pubDate>Sun, 13 Oct 2019 16:43:10 +0000</pubDate><guid>https://dfar.io/adding-icons-to-an-angular-web-site/</guid><description>Changing out the icons for an Angular website is just a few steps. This guide assumes you have an icon already in place, preferably in PNG format.
First, use a tool like Real Favicon Generatorto create the source files, which will include a favicon.ico file alongside a series of apple-touch-icon* files. Add these files to the /src directory.
After that, make the following change to your index.html file:
And finally make the change to angular.</description></item><item><title>Keep A Consumption-Based Function App Warm With A Scheduled Task</title><link>https://dfar.io/keep-a-consumption-based-function-app-warm-with-a-scheduled-task/</link><pubDate>Sat, 12 Oct 2019 16:14:40 +0000</pubDate><guid>https://dfar.io/keep-a-consumption-based-function-app-warm-with-a-scheduled-task/</guid><description>With Azure Function Apps using a Consumption plan, they will need to be warmed up if not used for 20 minutes to prevent having cold starts for the users in place. If you’re serving an API using a Function app, you’ll want to put this in place to keep performance ideal.
Something to note with this solution – it works well for low-traffic APIs where the goal is to serve an API using the consumption app for low costs.</description></item><item><title>Adding a Scheduled Task to NOPCommerce through the database</title><link>https://dfar.io/adding-a-scheduled-task-to-nopcommerce-through-the-database/</link><pubDate>Thu, 10 Oct 2019 14:04:31 +0000</pubDate><guid>https://dfar.io/adding-a-scheduled-task-to-nopcommerce-through-the-database/</guid><description>When working in NOPCommerce, you may want to create a scheduled task without having to go through plugin install and uninstall.
First, you’ll have to have a task set up in ideally a plugin.
You can do so by adding the following to the ScheduleTask table in the NOPCommerce database:
After that’s done, you should be able to immediately run the task.</description></item><item><title>Adding Swagger UI Documentation to Azure Function APIs</title><link>https://dfar.io/adding-swagger-ui-documentation-to-azure-function-apis/</link><pubDate>Thu, 03 Oct 2019 01:13:39 +0000</pubDate><guid>https://dfar.io/adding-swagger-ui-documentation-to-azure-function-apis/</guid><description>You can set up Swagger UI in your Azure Function API to allow for providing documentation for your serverless API pretty easily.
Initial Configuration First, add the SwashBuckle library to your process via the .csproj file:
Next set up the SwashBuckle startup code in SwashBuckleStartup.cs:
Now create both HTTP Triggers for the Swagger document:
And the Swagger UI document:
Running this locally will provide two endpoints: The final step for initial configuration is changing the documentation for the API page.</description></item><item><title>Cleaning up Hard Drive Space in Linux</title><link>https://dfar.io/cleaning-up-hard-drive-space-in-linux/</link><pubDate>Mon, 30 Sep 2019 15:46:18 +0000</pubDate><guid>https://dfar.io/cleaning-up-hard-drive-space-in-linux/</guid><description>If you run into a situation where a Linux machine is running out of space, here’s a way to check what is taking up so much space and clean the server up.
Install ncdu:
sudo apt-get install ncdu
Afterwards, start ncdu and you’ll be presented with an interface that’ll walk you through the directories taking the most space:
Troubleshooting – My Drive is 100% Full If you’re having trouble installing the above, you likely have a full drive that cannot do anything else.</description></item><item><title>Getting Slack Notifications with Azure Monitor</title><link>https://dfar.io/getting-slack-notifications-with-azure-monitor/</link><pubDate>Mon, 30 Sep 2019 00:24:13 +0000</pubDate><guid>https://dfar.io/getting-slack-notifications-with-azure-monitor/</guid><description>An option when trying to get alerts from Azure Monitor (such as web tests, processing alerts and more) is to get them to a Slack channel to allow for an alternative to receiving alerts via email.
Setting up Slack To start, you’ll need to have a Slack workspace with an available app. If needed, create the channel desired to receive notifications.
Create a new Slack appnamed “Azure Notifications” and turn on the “Incoming Webhooks” capability, which will provide a URL (webhook) that you’ll use later to receive the notifications from Azure.</description></item><item><title>Automatically Upgrading Azure Kubernetes Services</title><link>https://dfar.io/automatically-upgrading-azure-kubernetes-services/</link><pubDate>Wed, 25 Sep 2019 18:28:16 +0000</pubDate><guid>https://dfar.io/automatically-upgrading-azure-kubernetes-services/</guid><description>Azure provides a means to upgrade Kubernetes clusters using the AKS service. This guide will walk you through using an automation account to upgrade the services on a regular basis, making the process something you don’t need to worry about.
Note that you may want to hold off on doing this for production systems – if for some reason an upgrade were to break currently functionality, there is no means for reverting a cluster back to an original version.</description></item><item><title>Setting up SFTP File Migration to Azure Storage Account</title><link>https://dfar.io/setting-up-sftp-file-migration-to-azure-storage-account/</link><pubDate>Tue, 24 Sep 2019 16:19:49 +0000</pubDate><guid>https://dfar.io/setting-up-sftp-file-migration-to-azure-storage-account/</guid><description>This guide assumes you are using a Linux SFTP server for receiving files, and then uploading those files into an Azure storage account.
Initial Setup Install Azure CLI on the SFTP server with the following command:
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
Then login using an account with access to the storage account:
az login
Perform File Migration The next step is actually sending the files over to a storage account.</description></item><item><title>Manually Renew A Let’s Encrypt Certificate from Kubernetes</title><link>https://dfar.io/manually-renew-a-lets-encrypt-certificate-from-kubernetes/</link><pubDate>Mon, 23 Sep 2019 15:10:25 +0000</pubDate><guid>https://dfar.io/manually-renew-a-lets-encrypt-certificate-from-kubernetes/</guid><description>I work with a series of Kubernetes clusters that are restricted to public access, but still are encrypted using Let’s Encrypt certificates. Normally, when renewal is required, this process is automatically done for you.
In the case above, I have to kick off the renewal process directly. This can be done easily with deleting the TLS secret generated for the certificate.
First, make sure there is an open port to allow for port 80 to connect to Let’s Encrypt servers.</description></item><item><title>Setting up Slack Notifications with Jenkins</title><link>https://dfar.io/setting-up-slack-notifications-with-jenkins/</link><pubDate>Sat, 21 Sep 2019 16:00:27 +0000</pubDate><guid>https://dfar.io/setting-up-slack-notifications-with-jenkins/</guid><description>Setting up Slack notifications for build results with Jenkins is pretty simple. You’ll need the following:
A Jenkins server that you have admin rights to. Slack Notification Plugin A Slack workspace, ideally with a channel dedicated to Jenkins alerts. Setup To set up Slack, go to .slack.com/apps and search for Jenkins CI:Add the configuration and set the desired channel where alerts will appear.
After this, you’ll see some directions on setting up Slack on the Jenkins side.</description></item><item><title>Setting up Jenkins to Auto-Update</title><link>https://dfar.io/setting-up-jenkins-to-auto-update/</link><pubDate>Wed, 11 Sep 2019 20:53:45 +0000</pubDate><guid>https://dfar.io/setting-up-jenkins-to-auto-update/</guid><description>When setting up Jenkins, you’ll have to perform upgrades on the system yourself. You can do this pretty easily, but let’s automate the process so that each night, Jenkins will download and install the latest version.
To do this you’ll need to have SSH access to the server.
Creating Upgrade Script First, SSH into the server.
Create a bin/ folder in the user’s directory:
If it doesn’t already exist, create a .</description></item><item><title>Setting up a Linux SFTP Server</title><link>https://dfar.io/setting-up-a-linux-sftp-server/</link><pubDate>Fri, 06 Sep 2019 18:17:48 +0000</pubDate><guid>https://dfar.io/setting-up-a-linux-sftp-server/</guid><description>To get started, you’ll need to use the following:
A virtual machine with a public IP address. SSH address to the above virtual machine Configuring the User First, SSH into the server and install OpenSSH:
sudo apt install -y ssh openssh-server
Now create the group to have access, alongside a user to be able to access:
Now set up the directories to allow for the following:
The user can view the contents of their own folder.</description></item><item><title>Setting up Artifactory to use a root domain with a Reverse Proxy</title><link>https://dfar.io/setting-up-artifactory-to-use-a-root-domain-with-a-reverse-proxy/</link><pubDate>Thu, 05 Sep 2019 17:39:08 +0000</pubDate><guid>https://dfar.io/setting-up-artifactory-to-use-a-root-domain-with-a-reverse-proxy/</guid><description>When installing Artifactory, you’ll be able to start using it as `http://YOUR_DOMAIN:8081/artifactory. To change this to a simpler domain, you can read the following guide. You’ll need to have the following:
Artifactory administrative access SSH access to the server. Setting up Reverse Proxy to Simplify Domain First, SSH into the server and install Apache:
This should create a default page you can access by hitting the root URL:Now configure the appropriate modules:</description></item><item><title>Resetting Artifactory Admin Password</title><link>https://dfar.io/resetting-artifactory-admin-password/</link><pubDate>Wed, 04 Sep 2019 15:28:46 +0000</pubDate><guid>https://dfar.io/resetting-artifactory-admin-password/</guid><description>If you’ve lost access to the administrator account in your on-premised Artifactory, this guide will help walk you through setting it back up. You’ll need to have SSH access to the server in order to complete this guide.
To get started, SSH into the server and open**&amp;lt;em&amp;gt;$&amp;lt;code&amp;gt;ARTIFACTORY_HOME/etc/security/access/bootstrap.creds**. Enter the following information:
access-admin@127.0.0.1=YOUR_PASSWORD
Now assign read/write permissions:
&amp;lt;code&amp;gt;chmod&amp;amp;nbsp;600 bootstrap.credsAnd finally, restart the server.
Once that’s done, you’ll need to generate the Basic authorization header:</description></item><item><title>Adding Entity Framework/SQL Server to a Function App</title><link>https://dfar.io/adding-entity-framework-sql-server-to-a-function-app/</link><pubDate>Sun, 01 Sep 2019 20:14:49 +0000</pubDate><guid>https://dfar.io/adding-entity-framework-sql-server-to-a-function-app/</guid><description>When working with function apps, you may want to connect SQL Server to allow for using an API with data persistence.
Setting up Project to Use Entity Framework Add the following to your .csproj file, in the section with PackageReference entries:
And then add the following to allow for copying the project DLL (supports builds in both Windows and Linux):
For setting this up, I’d recommend having at least one Model ready for use.</description></item><item><title>Setting Up a Root Domain with Azure DNS</title><link>https://dfar.io/setting-up-a-root-domain-with-azure-dns/</link><pubDate>Fri, 30 Aug 2019 20:05:36 +0000</pubDate><guid>https://dfar.io/setting-up-a-root-domain-with-azure-dns/</guid><description>When setting up Azure CDN, you may want to use a naked domain (yourdomain.com) to access. It’s a little tricky, so here’s how I set it up:
Creation and Verification Create the CDN profile and endpoint in Azure.
Next set up a custom domain:To do this, you’ll need to modify the value highlighted as a CNAME record for your domain’s DNS. It will look like this:
Host: cdnverify. Value: cdnverify.</description></item><item><title>Viewing Traffic to Azure VMs using NSG Flow Logs</title><link>https://dfar.io/viewing-traffic-to-azure-vms-using-nsg-flow-logs/</link><pubDate>Mon, 19 Aug 2019 19:13:37 +0000</pubDate><guid>https://dfar.io/viewing-traffic-to-azure-vms-using-nsg-flow-logs/</guid><description>Setting up NSG flow logs allows for viewing the traffic coming in through a network security group. This can be useful for a few things:
Troubleshooting access issues (maybe something shouldn’t have access, or vise versa). Providing logging on the traffic accessing a server. You’ll need the following to get started with this guide:
Ensure that a network watcheris configured. An Azure subscription with the Insights providerinstalled. An existing Network Security Group.</description></item><item><title>Adding SSL to an AKS Ingress Controller (without using Let’s Encrypt)</title><link>https://dfar.io/adding-ssl-to-an-aks-ingress-controller-without-using-lets-encrypt/</link><pubDate>Mon, 12 Aug 2019 19:34:44 +0000</pubDate><guid>https://dfar.io/adding-ssl-to-an-aks-ingress-controller-without-using-lets-encrypt/</guid><description>I wrote about the ability to add HTTPS to an AKS cluster using Let’s Encrypt, but recently ran into a case where I needed to add a cert from a specific CA to the cluster.
To do this, you need the following:
An AKS cluster deployed in an Azure tenant. A certificate (should start with —–BEGIN CERTIFICATE—–) A private key associated to the certificate above (used when creating the CSR for the cert, and will start with —–BEGIN RSA PRIVATE KEY—–) Import the cert into the cluster:</description></item><item><title>Fixing “unable to get credential storage lock: File exists” when Deploying Function App via Jenkins</title><link>https://dfar.io/fixing-unable-to-get-credential-storage-lock-file-exists-when-deploying-function-app-via-jenkins/</link><pubDate>Wed, 24 Jul 2019 14:39:16 +0000</pubDate><guid>https://dfar.io/fixing-unable-to-get-credential-storage-lock-file-exists-when-deploying-function-app-via-jenkins/</guid><description>When working with deploying Azure Function Apps with Jenkins, I ran into an issue when trying to rebuild a Function App from scratch with the same name. I was unable to deploy the codebase via Pipeline due to the following error:
I was able to fix by doing the following:
SSH into the server.
Log in as the user that runs when running a Jenkins job (for example):
Access the user’s .</description></item><item><title>Setting up Jenkins to Run Angular Unit Tests</title><link>https://dfar.io/setting-up-jenkins-to-run-angular-unit-tests/</link><pubDate>Thu, 11 Jul 2019 14:12:00 +0000</pubDate><guid>https://dfar.io/setting-up-jenkins-to-run-angular-unit-tests/</guid><description>To be able to run unit tests in a Linux-based Jenkins instance, you just need to SSH into the Jenkins instance and run the following command:
When installing, you may run into a dependency issue, if so, run:
After Google Chrome is installed, you should be able to run npm test, meaning you can use Jenkins to run unit tests in the CI process.</description></item><item><title>Suggested Jenkins Plugins</title><link>https://dfar.io/suggested-jenkins-plugins/</link><pubDate>Thu, 11 Jul 2019 13:55:59 +0000</pubDate><guid>https://dfar.io/suggested-jenkins-plugins/</guid><description>Here’s a list of Jenkins plugins I tend to use frequently.
Global Slack Notification Plugin Allows for sending messages via pipeline to Slack channels.
Azure AD Plugin Allows for authentication to Jenkins using Azure Active Directory.
Checkmarx If you are using Checkmarx to scan for vulnerabilities in your codebases, this plugin will allow for connecting to a Checkmarx server automatically to generate a report.
After installing, make sure to set up a server to allow for connection in Configure System -&amp;gt; Checkmarx:If you need to add the Checkmarx step to the pipeline, this can be generated using the Pipeline Syntax feature.</description></item><item><title>Copying Jenkins Jobs from Server to Server</title><link>https://dfar.io/copying-jenkins-jobs-from-server-to-server/</link><pubDate>Mon, 08 Jul 2019 18:23:33 +0000</pubDate><guid>https://dfar.io/copying-jenkins-jobs-from-server-to-server/</guid><description>In the case where you want to copy a collection of jobs from one Jenkins server to another, here’s a process you can use to make the migration. This guide assumes you have two different remote Jenkins instances to copy jobs from.
SSH into the source server to determine where the /jobs directory is for Jenkins. Example would be in /
Use scp (on your local machine) to copy the jobs from the remote Jenkins instance with the jobs:</description></item><item><title>Setting up Jenkins with Azure AD Authentication</title><link>https://dfar.io/setting-up-jenkins-with-azure-ad-authentication/</link><pubDate>Mon, 08 Jul 2019 17:52:48 +0000</pubDate><guid>https://dfar.io/setting-up-jenkins-with-azure-ad-authentication/</guid><description>Configuring Azure AD Run the following command in CLI to generate a service principal:
Save the output generated, as you’ll use it for configuration in Jenkins.
Create a Redirect URL to https://YOURHOST/securityRealm/finishLoginSet Required Permissions in Azure Active Directory to:
Application Permissions (Read Directory Data) Delegated Permissions (Read Directory Data) Click on ‘Grant permissions’.If planning to use an Azure AD group for authorization, create one now.
Configuring Jenkins Download the ‘Azure AD’ plugin, and restart after installation.</description></item><item><title>Upgrading Ubuntu</title><link>https://dfar.io/upgrading-ubuntu/</link><pubDate>Mon, 08 Jul 2019 15:26:25 +0000</pubDate><guid>https://dfar.io/upgrading-ubuntu/</guid><description>To upgrade Ubuntu, use the following procedure:
Upgrade all of your current dependencies:
Change over dependencies with new versions of packages:
Perform the OS upgrade:</description></item><item><title>Setting up WordPress to serve next-gen WebP images</title><link>https://dfar.io/setting-up-wordpress-to-server-webp-images/</link><pubDate>Mon, 08 Jul 2019 13:14:55 +0000</pubDate><guid>https://dfar.io/setting-up-wordpress-to-server-webp-images/</guid><description>Why do this? If you are looking to improve performance on your website, this will automatically convert the images on your site to the more efficient WebP format. This will help with Google Lighthouse scores (especially in solving the “Serve images in next-gen format” issue).
Procedure Install the WebP Express Plugin (and buy the developer a coffee!)
Go into the WebP Express settings, accept the defaults, and click ‘Save settings’.</description></item><item><title>Setting up Jenkins in Azure</title><link>https://dfar.io/setting-up-jenkins-in-azure/</link><pubDate>Mon, 08 Jul 2019 08:08:32 +0000</pubDate><guid>https://dfar.io/setting-up-jenkins-in-azure/</guid><description>Before getting started, you’ll need to have:
An Azure tenant and subscription. OpenSSH (installation for Windows 10) Installing Jenkins via Azure Marketplace The easiest way to install Jenkins is to use the Azure Marketplace link. A couple suggestions when setting up:
I recommend using an SSH Public Key to sign in. If you haven’t yet, generate one using ssh-keygen and then get it using cat ~.ssh\id_rsa.pub Set up a domain name label, especially if you aren’t planning to put this behind a different domain.</description></item><item><title>Creating a Function App With a Full CI/CD Pipeline with VSCode and Jenkins</title><link>https://dfar.io/creating-a-function-app-with-a-full-ci-cd-pipeline-with-vscode-and-jenkins/</link><pubDate>Mon, 01 Jul 2019 14:55:01 +0000</pubDate><guid>https://dfar.io/creating-a-function-app-with-a-full-ci-cd-pipeline-with-vscode-and-jenkins/</guid><description>Before starting this, you’ll need to have a few things on your machine:
Azure Functions VSCode Extension Azure Functions Core Tools (choco install azure-functions-core-tools) .NET Core Build Tools (choco install visualstudio2017-workload-netcorebuildtools) An Azure subscription A Function app created inside of the Azure subscription A Jenkins server with the following set up: Azure Function plugin installed A service principal configured (use az ad sp create-for-rbac -n &amp;quot;jenkins&amp;quot; --role contributor --scopes /subscriptions/{SubID} and then add to Jenkins Credentials) Creating and Locally Running the Function App Inside VSCode, create a function app project with the following:</description></item><item><title>Copying a Database in Azure with Always Encrypted Data</title><link>https://dfar.io/copying-a-database-in-azure-with-always-encrypted-data/</link><pubDate>Tue, 25 Jun 2019 15:19:39 +0000</pubDate><guid>https://dfar.io/copying-a-database-in-azure-with-always-encrypted-data/</guid><description>When trying to copy a database with Always Encrypted data (say, to a different environment), you’ll generally want to recycle the Column Master Key used to match the vault stored in the same Azure resource group. This takes a little bit of work to do:
Pre-Reqs You’ll need to have the following software installed:
SSMS Azure CLI You’ll also need to make sure the database you’re copying from has a key that already exists.</description></item><item><title>Setting up HTTPS on an AKS Cluster</title><link>https://dfar.io/setting-up-https-on-an-aks-cluster/</link><pubDate>Mon, 24 Jun 2019 16:16:08 +0000</pubDate><guid>https://dfar.io/setting-up-https-on-an-aks-cluster/</guid><description>Pre-Reqs The following is required:
An ingress controller should already be installed. The public IP of the Ingress controller should have a DNS name. Helm needs to be running at 2.13.1. The Kubernetes cluster should be publicly accessible (to allow cert creation) To check if Helm is running with version 2.13.1 (there is a bug that doesn’t allow 2.14+ to work). To check, run the following:
If the output doesn’t match as below, you need to downgrade Helm.</description></item><item><title>Adding Font Awesome to an Angular CLI Project</title><link>https://dfar.io/adding-font-awesome-to-an-angular-cli-project/</link><pubDate>Thu, 20 Jun 2019 18:51:14 +0000</pubDate><guid>https://dfar.io/adding-font-awesome-to-an-angular-cli-project/</guid><description>To add Font Awesome to your Angular CLI project, do the following:
Install Font Awesome:
Then add the following to your styles.css:
Once that’s done, use the following to add to your project:</description></item><item><title>Applying IP Restrictions to a Large Set of Azure Resources</title><link>https://dfar.io/applying-ip-restrictions-to-a-large-set-of-azure-resources/</link><pubDate>Thu, 20 Jun 2019 14:13:26 +0000</pubDate><guid>https://dfar.io/applying-ip-restrictions-to-a-large-set-of-azure-resources/</guid><description>To do this, use PowerShell and Azure CLI to collect all of the NSGs and get all of the NSGs in the subscription:
Then go through every NSG and create the rule:
Next, get a list of the App Services:
And go through and add the list of IPs required (must use individual IPs):
Removing Access To delete the same list of rules from the NSGs, use the same name:</description></item><item><title>Creating a Buy One Get One Half Off Discount In NopCommerce</title><link>https://dfar.io/creating-a-buy-one-get-one-half-off-discount-in-nopcommerce/</link><pubDate>Wed, 19 Jun 2019 17:04:58 +0000</pubDate><guid>https://dfar.io/creating-a-buy-one-get-one-half-off-discount-in-nopcommerce/</guid><description>I recently worked with a client on trying to set up a Buy One Get One Half Off deal on NopCommerce – here’s what I did to get it working:
Requirements Before starting, you should have the following:
Have the Has One Product Plugin installed. Have a product to apply the discount to. Process Go to the Discounts page and create a new Discount with the following information:Next, go to the ‘Restrictions’ tab and add a restriction for the Product, using the ‘Add Product’ functionality Make sure you add the :2 to the end to force purchase of two:</description></item><item><title>Deploying web.config with an Angular Project</title><link>https://dfar.io/deploying-web-config-with-an-angular-project/</link><pubDate>Mon, 17 Jun 2019 18:35:57 +0000</pubDate><guid>https://dfar.io/deploying-web-config-with-an-angular-project/</guid><description>When deploying an Angular project out to Azure, you’ll need to include a web.config file to allow for things such as the following:
Getting routing to work. Serving static content. First, create a web.config file in src/. Here’s an example of what it might look like:
After this is done, make a change to angular.json to bundle the web.config file in the build:
Now let’s verify by running ng build --prod:</description></item><item><title>Adding Bootstrap To An Angular CLI Project</title><link>https://dfar.io/adding-bootstrap-to-an-angular-cli-project/</link><pubDate>Mon, 17 Jun 2019 14:17:19 +0000</pubDate><guid>https://dfar.io/adding-bootstrap-to-an-angular-cli-project/</guid><description>Pre-Reqs Before setting this up, you’ll need to have an Angular project to add Bootstrap to. If you’re starting fresh, you can create one easily with ng new &amp;lt;name&amp;gt;.
Procedure First, install bootstrap from npm:
Then add the following to the top of your styles.css file:
That’s it! Bootstrap is now enabled for your Angular CLI application.</description></item><item><title>Setting up WordPress in Azure with AKS and Helm</title><link>https://dfar.io/setting-up-wordpress-in-azure-with-aks-and-helm/</link><pubDate>Fri, 14 Jun 2019 04:40:48 +0000</pubDate><guid>https://dfar.io/setting-up-wordpress-in-azure-with-aks-and-helm/</guid><description>To get started, you’ll need the following:
kubectl helm Azure subscription Installing WordPress in AKS with Helm Set up an Azure Kubernetes Service with the following:
Node size – desired VM size (cheapest available is B2s) Node count – need to use at least a minimum of 1. After AKS is set up, connect to it with the following:
az aks get-credentials --resource-group AKS_RG --name AKS_NAME</description></item><item><title>Setting Up SonarQube in Azure with Azure AD Integration</title><link>https://dfar.io/setting-up-sonarqube-in-azure-with-azure-ad-integration/</link><pubDate>Sun, 09 Jun 2019 03:27:00 +0000</pubDate><guid>https://dfar.io/setting-up-sonarqube-in-azure-with-azure-ad-integration/</guid><description>Installing SonarQube Go to the marketplace and install SonarQube from Bitnami – https://bitnami.com/stack/sonarqube/cloud/azure with the following:
resize to D1_v2 if desired, configure any NSG restrictions After creation, set a DNS name label for the IP address.
Access using the domain name, and follow the directions in the link above to log in.
Setting up Azure AD Integration Setting up HTTPS To be able to use Azure AD, you have to use HTTPS.</description></item><item><title>Create Multiple Terraform Resources with a Map</title><link>https://dfar.io/create-multiple-terraform-resources-with-a-map/</link><pubDate>Fri, 07 Jun 2019 00:26:34 +0000</pubDate><guid>https://dfar.io/create-multiple-terraform-resources-with-a-map/</guid><description>I recently worked through a case in Terraform where I wanted to be able to pass in a map for Terraform to allow creating secrets in an Azure Key Vault. We’ll use the count, keys(, and values( helpers to iterate through the map.
This code sample will show a way to dynamically determine the amount of resources needed. In this case, this will create secrets based on the map provided in the Terraform variable:</description></item><item><title>Uploading a Public Key to a VM</title><link>https://dfar.io/uploading-a-public-key-to-a-vm/</link><pubDate>Sun, 02 Jun 2019 15:48:39 +0000</pubDate><guid>https://dfar.io/uploading-a-public-key-to-a-vm/</guid><description>This will allow for This guide assumes you are trying to access a VM with a different machine than the one used to originally create the VM. Obtaining Public KeyFirst, check to see if you already have a public key for your machine: ls ~/.sshIf you don’t see an id_rsa.pubfile, create a public/private key pair on the machine that will access the VM: ssh-keygenUploadingFor the next step, you’ll need to use a machine that can access the VM – using the public key generated in the step above, SSH into the VM and run the following: scp /path/to/public_key username@server:~mv id_rsa.</description></item><item><title>Setting up Remote State with Terraform and Azure</title><link>https://dfar.io/setting-up-remote-state-with-terraform-and-azure/</link><pubDate>Mon, 13 May 2019 12:48:21 +0000</pubDate><guid>https://dfar.io/setting-up-remote-state-with-terraform-and-azure/</guid><description/></item><item><title>Git Repo Best Practices</title><link>https://dfar.io/git-repo-best-practices/</link><pubDate>Sun, 21 Apr 2019 17:37:42 +0000</pubDate><guid>https://dfar.io/git-repo-best-practices/</guid><description>When creating a repository for a project, here are a few best practices to keep everything in good working state. Forcing Pull Request Merges to masterWhen creating a repo, it’s a good idea to keep the master branch deployable and clean at all times. A good way to do this is to not allow direct commits to the branch. In turn, if you have a CI/CD process in place, you can have more confidence that checking things into master can result in a deployment.</description></item><item><title>Creating a nopCommerce Plugin in version 3.90 and below</title><link>https://dfar.io/creating-a-nopcommerce-plugin-in-version-3-90-and-below/</link><pubDate>Wed, 27 Mar 2019 01:18:01 +0000</pubDate><guid>https://dfar.io/creating-a-nopcommerce-plugin-in-version-3-90-and-below/</guid><description>I recently worked with a client using an older version of nopCommerce that needed to have a plugin made for functionality. In particular, this plugin integrates with updown.io to allow for turning checks on and off during scheduled maintenance.
To do this, you’ll need to have the nopCommerce source code available for use.
Creating the Plugin To get started, create a Class Library in the Plugins folder:
Make sure to change the location to the plugin folder below the name.</description></item><item><title>SSHing into an Azure Kubernetes Service node</title><link>https://dfar.io/sshing-into-an-azure-kubernetes-service-node/</link><pubDate>Mon, 25 Mar 2019 15:09:40 +0000</pubDate><guid>https://dfar.io/sshing-into-an-azure-kubernetes-service-node/</guid><description/></item><item><title>Keeping Track of Apparel in NopCommerce by Size</title><link>https://dfar.io/keeping-track-of-apparel-in-nopcommerce-by-size/</link><pubDate>Sun, 24 Mar 2019 02:51:08 +0000</pubDate><guid>https://dfar.io/keeping-track-of-apparel-in-nopcommerce-by-size/</guid><description/></item><item><title>Setting up WordPress in Azure with SSL for ~$8 a Month</title><link>https://dfar.io/cheaply-setting-up-wordpress-with-ssl-in-azure/</link><pubDate>Thu, 21 Mar 2019 00:53:15 +0000</pubDate><guid>https://dfar.io/cheaply-setting-up-wordpress-with-ssl-in-azure/</guid><description>Basic plan (allowing for Always on and SSL): ~$50/month
MySQL for Azure: ~$25 With this solution, you will create everything on one virtual machine, allowing for dynamic scaling as needed for the machine. This does of course come with some downside:
You will need to handle backing up of both the files on the server and the data in the database.
Creating the VM First, create the VM and Resource Group:</description></item><item><title>Setting up WordPress to force SSL in the Admin Area</title><link>https://dfar.io/setting-up-wordpress-to-force-ssl-in-the-admin-area/</link><pubDate>Fri, 15 Mar 2019 15:51:17 +0000</pubDate><guid>https://dfar.io/setting-up-wordpress-to-force-ssl-in-the-admin-area/</guid><description/></item><item><title>Create a Java Web App with Spring Boot Starter, Gradle, and Azure Active Directory</title><link>https://dfar.io/create-a-java-web-app-with-spring-boot-starter-gradle-and-azure-active-directory/</link><pubDate>Wed, 13 Mar 2019 18:36:50 +0000</pubDate><guid>https://dfar.io/create-a-java-web-app-with-spring-boot-starter-gradle-and-azure-active-directory/</guid><description>Working on a project that would eventually use Azure Active Directory for authentication, I wanted to use Microsoft’s guide to get started with an app that could authenticate. However, the guide is written using Maven – and in our case, we are using Gradle for builds across the ecosystem.
I was able to mostly follow the guide provided, but ran into a gotcha – involving having to add a fixed dependency to get the system working.</description></item><item><title>Delete Recovery Containers in Azure</title><link>https://dfar.io/delete-recovery-containers-in-azure/</link><pubDate>Mon, 25 Feb 2019 14:38:22 +0000</pubDate><guid>https://dfar.io/delete-recovery-containers-in-azure/</guid><description/></item><item><title>Setting up OpenVPN on Azure From Scratch</title><link>https://dfar.io/setting-up-openvpn-on-azure-from-scratch/</link><pubDate>Tue, 19 Feb 2019 14:26:37 +0000</pubDate><guid>https://dfar.io/setting-up-openvpn-on-azure-from-scratch/</guid><description>Why do this? One of the major benefits being able to use the internet with a specified IP address. If you’re going to be working systems that whitelist specific IP addresses, you can use this solution to allow for access regardless of both machine and location.
This guide assumes that you:
Have an Azure subscription in place. Have a means of SSHing into a virtual machine, such as OpenSSH. Setting up OpenVPN Server Create a virtual machine in Azure with the following specs:</description></item><item><title>How I Set Up My iPhone</title><link>https://dfar.io/how-i-set-up-my-iphone/</link><pubDate>Sun, 06 Jan 2019 15:21:52 +0000</pubDate><guid>https://dfar.io/how-i-set-up-my-iphone/</guid><description/></item><item><title>API Vs. Microservices: A Microservice Is More Than Just an API</title><link>https://dfar.io/api-vs-microservices-a-microservice-is-more-than-just-an-api/</link><pubDate>Thu, 15 Nov 2018 16:04:39 +0000</pubDate><guid>https://dfar.io/api-vs-microservices-a-microservice-is-more-than-just-an-api/</guid><description/></item><item><title>The Benefits of Test-driven Development</title><link>https://dfar.io/the-benefits-of-test-driven-development/</link><pubDate>Sun, 28 Oct 2018 21:12:54 +0000</pubDate><guid>https://dfar.io/the-benefits-of-test-driven-development/</guid><description/></item><item><title>9 Top DevOps Conferences — A Developer's Picks</title><link>https://dfar.io/9-top-devops-conferences-a-developers-picks/</link><pubDate>Wed, 17 Oct 2018 14:22:05 +0000</pubDate><guid>https://dfar.io/9-top-devops-conferences-a-developers-picks/</guid><description>This post was originally featured at Sonatype.
With the DevOps movement only continuing to grow, plenty of conferences have sprung up around the topic. These are a great way to get acquainted with DevOps methodology and the capabilities it can bring to your organization.
Conferences also let you do the following:
Ramp up your knowledge on DevOps technologies, whether you’re new to the concept or have plenty of experience. Network with other like-minded people.</description></item><item><title>TDD vs. BDD: What Are They and How Do They Differ?</title><link>https://dfar.io/tdd-vs-bdd-what-are-they-and-how-do-they-differ/</link><pubDate>Sun, 30 Sep 2018 01:25:03 +0000</pubDate><guid>https://dfar.io/tdd-vs-bdd-what-are-they-and-how-do-they-differ/</guid><description>Improving the testability of software is extremely important, and a difficult ideal in its own right. To achieve that, engineers and others interested in software testability have created many strategies, tools, and methodologies to improve the testability of software solutions.
With so many methodologies and techniques available, which one should you choose? Two of the most prominent methodologies I’ve encountered are test-driven development (TDD) and behavior-driven development (BDD). In this post, I’ll describe what TDD and BDD are, discuss their real-world applications, and explain how they differ.</description></item><item><title>Server Performance Metrics: 8 You Should Be Considering</title><link>https://dfar.io/server-performance-metrics-8-you-should-be-considering/</link><pubDate>Mon, 24 Sep 2018 20:03:09 +0000</pubDate><guid>https://dfar.io/server-performance-metrics-8-you-should-be-considering/</guid><description>Raygun.
With the DevOps movement entering the spotlight, more and more developers concern themselves with the end-to-end delivery of web applications. This includes the deployment, performance, and maintenance of the application.As an application gains more users in a production environment, it’s increasingly critical that you understand the role of the server. To determine the health of your applications, you may find it useful to gather performance metrics for the servers running your web applications.</description></item><item><title>Setting Up A Windows 10 Workstation in 2018</title><link>https://dfar.io/setting-up-a-windows-10-workstation-in-2018/</link><pubDate>Tue, 18 Sep 2018 18:12:56 +0000</pubDate><guid>https://dfar.io/setting-up-a-windows-10-workstation-in-2018/</guid><description>I recently built a new PC for myself to use for work and wanted to document the process of getting it set up for use. Each year, I go through and reinstall any system I have as a means to make sure I have this process down, alongside doing an audit to see what I’m actually using, to make sure I keep things clean.
Here’s the process I use when setting up a Windows 10 workstation:</description></item><item><title>Upgrading Jenkins On Azure</title><link>https://dfar.io/upgrading-jenkins-on-azure/</link><pubDate>Sat, 11 Aug 2018 18:51:37 +0000</pubDate><guid>https://dfar.io/upgrading-jenkins-on-azure/</guid><description>the Microsoft documentation.
SSH into the Virtual Machine If you’ve been using this instance, you should be familiar with SSH forwarding and being able to access Jenkins using localhost. If this is new, you can read this Jenkins articleon the security setup for the Azure Jenkins Marketplace instance.
Use this command in a command line interface to log in to your virtual machine:
Replace the following:
Username – the server admin username created when creating the Azure VM.</description></item><item><title>Living In A DevOps World (Part 2: Implementation)</title><link>https://dfar.io/living-in-a-devops-world-part-2-implementation/</link><pubDate>Mon, 30 Jul 2018 16:00:50 +0000</pubDate><guid>https://dfar.io/living-in-a-devops-world-part-2-implementation/</guid><description>DevOps.com.
Part one of this article focused on some of the more behind-the-scenes benefits of an Agile DevOps approach. In part two the focus turns to some of the other traditional problems that a well-executed DevOps approach can address, and how doing so can benefit an organization in more ways than just a technical perspective.
By way of quick review, DevOps was born out of the Lean and Agile software development methodologies when it became clear that, while those methodologies did indeed speed up the development process, a bottleneck still occurred when push came to shove and new code had to be moved to quality assurance and production environments.</description></item><item><title>Living In A DevOps World (Part 1: Recognition)</title><link>https://dfar.io/living-in-a-devops-world-part-1-recognition/</link><pubDate>Mon, 23 Jul 2018 16:00:33 +0000</pubDate><guid>https://dfar.io/living-in-a-devops-world-part-1-recognition/</guid><description>DevOps.com.
DevOps has evolved into a conceptual and working model for more effective software implementation. However, there are differences of opinion on the real-world value of any approach to date. This includes the question of the best way to implement a real-world DevOps environment. This two-part article will focus on what an agile DevOps approach is meant and not meant to address.
DevOps sits at the nexus of three essential business technology functions: software development, quality assurance and operations.</description></item><item><title>Setting Up a Local WordPress Development Environment</title><link>https://dfar.io/setting-up-a-local-wordpress-development-environment/</link><pubDate>Mon, 16 Jul 2018 16:00:09 +0000</pubDate><guid>https://dfar.io/setting-up-a-local-wordpress-development-environment/</guid><description>Setting up the website and adding content. Installing plugins to test their functionality. Viewing a functional website without a shared environment. Theme or plugin development. This guide will walk you through the following steps. Installing a LAMP Development Environment Creating a database Downloading WordPress core files, and setting them up on server. Creating a local domain for use. Installing A LAMP Development Environment XAMPPis a cross-platform LAMP (Linux, Apache, MySQL, PHP) environment used for running WordPress on your local machine.</description></item><item><title>Installing WordPress in Azure In 15 Minutes</title><link>https://dfar.io/installing-wordpress-in-azure-in-15-minutes/</link><pubDate>Mon, 09 Jul 2018 12:00:33 +0000</pubDate><guid>https://dfar.io/installing-wordpress-in-azure-in-15-minutes/</guid><description>~$9 a month for a custom domain that does not supports using SSL If you’re interested in having SSL support, you’ll need to jump to the B1 level. This costs ~$32 a month. ~$25 a month for the lowest setting capabilities for Azure Database for MySQL This assumes a fresh installation of WordPress, with no existing databases available on your current Azure instance. If you have a MySQL Server already set up in Azure, you’ll change the directions a bit to just use the existing instance.</description></item></channel></rss>