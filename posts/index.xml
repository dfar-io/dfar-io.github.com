<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Dave Farinelli</title><link>https://dfar.io/posts/</link><description>Recent content in Posts on Dave Farinelli</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Sep 2023 18:43:08 +0000</lastBuildDate><atom:link href="https://dfar.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>PC Installation and Setup</title><link>https://dfar.io/posts/pc-installation-and-setup/</link><pubDate>Thu, 14 Sep 2023 18:43:08 +0000</pubDate><guid>https://dfar.io/posts/pc-installation-and-setup/</guid><description>&lt;h2 id="create-windows-installation-media">Create Windows Installation Media&lt;/h2>
&lt;p>Via Windows, use &lt;a href="https://support.microsoft.com/en-us/windows/create-installation-media-for-windows-99a58364-8c02-206f-aa6f-40c3b507420d">Media Creator&lt;/a>.&lt;/p>
&lt;h2 id="install-windows">Install Windows&lt;/h2>
&lt;ol>
&lt;li>Create EFI partition
&lt;ol>
&lt;li>Shift + F10&lt;/li>
&lt;li>&lt;code>diskpart&lt;/code>&lt;/li>
&lt;li>&lt;code>list disk&lt;/code>&lt;/li>
&lt;li>&lt;code>select disk &amp;lt;X&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>clean&lt;/code>&lt;/li>
&lt;li>&lt;code>convert gpt&lt;/code>&lt;/li>
&lt;li>&lt;code>create partition eft size=500&lt;/code>&lt;/li>
&lt;li>&lt;code>exit&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Create ~400GB partition.&lt;/li>
&lt;/ol>
&lt;h2 id="configure-windows">Configure Windows&lt;/h2>
&lt;ol>
&lt;li>Setup multi monitors.&lt;/li>
&lt;li>Set timezone.&lt;/li>
&lt;li>Install:
&lt;ol>
&lt;li>Steam (login, download any games)&lt;/li>
&lt;li>Dropbox (login)&lt;/li>
&lt;li>Procrastitracker&lt;/li>
&lt;li>SHapr3D (login)&lt;/li>
&lt;li>VSCode (settings sync)&lt;/li>
&lt;li>Discord (login)&lt;/li>
&lt;li>Cura (login)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="create-arch-linux-installation-media">Create Arch Linux Installation Media&lt;/h2>
&lt;p>Via Windows:&lt;/p>
&lt;ol>
&lt;li>Download Arch Linux ISO&lt;/li>
&lt;li>Download &amp;amp; Install Rufus
&lt;ol>
&lt;li>Write ISO in GPT/DD Mode.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="install-arch-linux">Install Arch Linux&lt;/h2>
&lt;ol>
&lt;li>&lt;code>ping dfar.io&lt;/code> (confirm internet)&lt;/li>
&lt;li>&lt;code>timedatectl set-ntp true&lt;/code>&lt;/li>
&lt;li>&lt;code>timedatectl status&lt;/code>&lt;/li>
&lt;li>Create partitions
&lt;ol>
&lt;li>&lt;code>parted -l&lt;/code>&lt;/li>
&lt;li>&lt;code>cfdisk &amp;lt;DISK&amp;gt;&lt;/code>
&lt;ol>
&lt;li>8Gb Linux Swap&lt;/li>
&lt;li>Remaining Linux Root (x86-64)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Format &amp;amp; mount partitions
&lt;ol>
&lt;li>&lt;code>mkfs.ext4 &amp;lt;PRIMARY&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>mkswap &amp;lt;SWAP&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>swapon &amp;lt;SWAP&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>mount &amp;lt;PRIMARY&amp;gt; /mnt&lt;/code>&lt;/li>
&lt;li>&lt;code>mkdir /mnt/boot&lt;/code>&lt;/li>
&lt;li>&lt;code>mount &amp;lt;EFI&amp;gt; /mnt/boot&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Install base linux
&lt;ol>
&lt;li>&lt;code>pacstrap /mnt base linux linux-firemware nano grun efibootmgr networkmanager git firefox sudo wget cron xorg xterm xorg-xinit xorg-xclock xorg-twm base-devel awesome lightdm lightdm-gtk-greeter nvidia nvidia-settings pkg-config mesa arandr nautilus flameshot evince gnome-calculator numlockx vlc pulseaudio pasystray pavucontrol openvpn network-manager-applet networkmanager-openvpn remmina freerdp sane imagescan gnome-keyring gimp avidemux-qt&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Configure base linux
&lt;ol>
&lt;li>&lt;code>genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab&lt;/code>&lt;/li>
&lt;li>&lt;code>arch-chroot /mnt&lt;/code>&lt;/li>
&lt;li>&lt;code>ln -sf /usr/share/zoneinfo/America/Detroit /etc/localtime&lt;/code>&lt;/li>
&lt;li>&lt;code>hwclock --systohc&lt;/code>&lt;/li>
&lt;li>&lt;code>nano /etc/locale.gen&lt;/code> (uncomment locale)&lt;/li>
&lt;li>&lt;code>locale-gen&lt;/code>&lt;/li>
&lt;li>&lt;code>nano /etc/locale.conf&lt;/code> (LANG=en_US.UTF-8)&lt;/li>
&lt;li>&lt;code>nano /etc/hostname&lt;/code>&lt;/li>
&lt;li>&lt;code>nano /etc/hosts&lt;/code> (add 1st code block)&lt;/li>
&lt;li>&lt;code>passwd&lt;/code>&lt;/li>
&lt;li>&lt;code>grub-install &amp;lt;EFI&amp;gt; --efi-directory=/boot&lt;/code>&lt;/li>
&lt;li>Add Windows to Boot
&lt;ol>
&lt;li>&lt;code>blkid&lt;/code> (find UUID of EFI)&lt;/li>
&lt;li>&lt;code>nano /etc/grub.d/40_custom&lt;/code> (add 2nd code block below)&lt;/li>
&lt;li>&lt;code>grub-mkconfig -o /boot/grub/grub.cfg&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>127.0.0.1 localhost
::1 localhost
127.0.1.1 dfar-desktop.localdomain dfar-desktop
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>menuentry &amp;#34;Windows 11&amp;#34; {
search --fs-uuid --no-floppy --set=root &amp;lt;EFI_UUID&amp;gt;
chainloader (${root})/EFI/Microsoft/Boot/bootmgfw.efi
}
&lt;/code>&lt;/pre>&lt;ol>
&lt;li>Setup user
&lt;ol>
&lt;li>&lt;code>useradd -m dfar&lt;/code>&lt;/li>
&lt;li>&lt;code>passwd dfar&lt;/code>&lt;/li>
&lt;li>&lt;code>usermod -aG wheel,audio,video,optical,storage dfar&lt;/code>&lt;/li>
&lt;li>&lt;code>nano /etc/sudoers&lt;/code> (allow wheel group sudo access)&lt;/li>
&lt;li>Remove thumbdrive, &lt;code>exit&lt;/code>, &lt;code>reboot&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="configure-arch-linux">Configure Arch Linux&lt;/h2>
&lt;ol>
&lt;li>Login with &lt;code>dfar&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo systemctl start NetworkManager&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo systemctl enable NetworkManager&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo systemctl start lightdm.service&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo systemctl enable lightdm.service&lt;/code>&lt;/li>
&lt;li>Setup Monitors
&lt;ol>
&lt;li>&lt;code>arandr&lt;/code> (save result to primary.sh)&lt;/li>
&lt;li>&lt;code>nano ~/.xprofile&lt;/code> (./.screenlayout/primary.sh)&lt;/li>
&lt;li>&lt;code>reboot&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Install yay
&lt;ol>
&lt;li>&lt;code>git clone https://aur.archlinux.org/yay.git&lt;/code>&lt;/li>
&lt;li>&lt;code>cd yay&lt;/code>&lt;/li>
&lt;li>&lt;code>makrpkg -si&lt;/code>&lt;/li>
&lt;li>&lt;code>cd..&lt;/code>&lt;/li>
&lt;li>&lt;code>rm -rf yay&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Install Dropbox
&lt;ol>
&lt;li>&lt;code>git clone https://aur.archlinux.com/dropbox.git&lt;/code>&lt;/li>
&lt;li>&lt;code>cd dropbox&lt;/code>&lt;/li>
&lt;li>&lt;code>makepkg -si&lt;/code>&lt;/li>
&lt;li>&lt;code>cd..&lt;/code>&lt;/li>
&lt;li>&lt;code>rm -rf dropbox&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Configure Dropbox
&lt;ol>
&lt;li>Sign-in&lt;/li>
&lt;li>&lt;code>mkdir ~/.config/awesome&lt;/code>&lt;/li>
&lt;li>&lt;code>ln -s ~/Dropbox/config/rc.lua ~/.config/awesome/rc.lua&lt;/code>&lt;/li>
&lt;li>&lt;code>ln -s ~/Dropbox/config/Xresources-desktop ~/.Xresources&lt;/code>&lt;/li>
&lt;li>&lt;code>reboot&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Install yay packages
&lt;ol>
&lt;li>&lt;code>yay -S visual-studio-code-bin insomnia azuredatastudio-bin&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Final touches
&lt;ol>
&lt;li>Firefox&lt;/li>
&lt;li>Git (config)&lt;/li>
&lt;li>Set up VPN/Remmina&lt;/li>
&lt;li>VSCode (settings sync)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item><item><title>Griftlands</title><link>https://dfar.io/posts/griftlands/</link><pubDate>Sun, 02 Jul 2023 18:48:04 +0000</pubDate><guid>https://dfar.io/posts/griftlands/</guid><description>&lt;ul>
&lt;li>Small decks (&amp;lt;20 ideal)&lt;/li>
&lt;li>Remove basic cards from deck (upgrade to destroy/expend)&lt;/li>
&lt;li>Card draw and discard decks are strong&lt;/li>
&lt;li>Stun cards (stunning blow/kidney punch) always worth taking&lt;/li>
&lt;/ul></description></item><item><title>7Monster Hunter Rise - Weapon Notes</title><link>https://dfar.io/posts/monster-hunter-rise/</link><pubDate>Tue, 28 Mar 2023 18:43:08 +0000</pubDate><guid>https://dfar.io/posts/monster-hunter-rise/</guid><description>&lt;h2 id="greatsword">Greatsword&lt;/h2>
&lt;ul>
&lt;li>Use draw attacks (stages 1 and 2, charge to level 2 minimum)&lt;/li>
&lt;li>Look for Strongarm stance opportunities for TCS&lt;/li>
&lt;li>Immediate draw -&amp;gt; charge -&amp;gt; tackle -&amp;gt; TCS (fastest from sheathe to TCS)&lt;/li>
&lt;/ul>
&lt;h2 id="long-sword">Long Sword&lt;/h2>
&lt;ul>
&lt;li>Use Sakura Slash to get to red charge&lt;/li>
&lt;li>Leverage counters
&lt;ul>
&lt;li>ZR+A -&amp;gt; ZR (reactive, long window, cancel sheathe with ZR+B)&lt;/li>
&lt;li>ZR+B -&amp;gt; ZR (predictive, can ZL+X out of it)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="sword-and-shield">Sword and Shield&lt;/h2>
&lt;ul>
&lt;li>Use Metsu when possible (ZL+A -&amp;gt; A)&lt;/li>
&lt;li>Use backstep to avoid attacks when Metsu not available&lt;/li>
&lt;/ul>
&lt;h2 id="dual-blades">Dual Blades&lt;/h2>
&lt;ul>
&lt;li>Elemental, dash juice&lt;/li>
&lt;li>Stay above 1/3 stamina, demon gauge&lt;/li>
&lt;/ul>
&lt;h2 id="lance">Lance&lt;/h2>
&lt;ul>
&lt;li>Insta-block when not in-thrust, counter thrust otherwise&lt;/li>
&lt;li>Guard Dash/Spiral Thrust quickest blocking options out of thrust&lt;/li>
&lt;/ul>
&lt;h2 id="gunlance">Gunlance&lt;/h2>
&lt;ul>
&lt;li>Blast Dash useful for closing gap&lt;/li>
&lt;li>Erupting Cannon
&lt;ul>
&lt;li>followup for Ground Splitting/Guard Edge&lt;/li>
&lt;li>Can combo into L+X&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Full burst: X+A (slam) -&amp;gt; A (burst) -&amp;gt; X (wide sweep, very laggy) -&amp;gt; ZR+A (quick reload) -&amp;gt; repeat&lt;/li>
&lt;li>L+X -&amp;gt; X+A -&amp;gt; A -&amp;gt; X -&amp;gt; ZR+A -&amp;gt; (moving full burst)&lt;/li>
&lt;li>ZR+X -&amp;gt; ZR+A -&amp;gt; FullBurst(standing full burst)&lt;/li>
&lt;/ul>
&lt;h2 id="hammer">Hammer&lt;/h2>
&lt;ul>
&lt;li>Switch and stay in strength mode&lt;/li>
&lt;li>ZR -&amp;gt; Charge 2 for small openings, immediate Water Strike&lt;/li>
&lt;li>ZR -&amp;gt; Charge 3 when possible, standing still &amp;gt; moving&lt;/li>
&lt;/ul>
&lt;h2 id="hunting-horn">Hunting Horn&lt;/h2>
&lt;ul>
&lt;li>Use echo mode&lt;/li>
&lt;li>Keep Silkbind Shockwave up as much as possible, use to tank attacks/roars&lt;/li>
&lt;li>^A -&amp;gt; ZR&lt;/li>
&lt;li>^A -&amp;gt; ^XA -&amp;gt; ZR&lt;/li>
&lt;li>^X -&amp;gt; ZR (to play )&lt;/li>
&lt;li>Sonic Bloom for wakeups&lt;/li>
&lt;/ul>
&lt;h2 id="switch-axe">Switch Axe&lt;/h2>
&lt;ul>
&lt;li>Elemental&lt;/li>
&lt;li>Open with:
&lt;ul>
&lt;li>ZR (sword) -&amp;gt; ZR (axe) for quick openings&lt;/li>
&lt;li>L+X -&amp;gt; ZR -&amp;gt; A -&amp;gt; ZR for longer openings&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ZR (sword) -&amp;gt; A (double slash) -&amp;gt; ZR (axe), best overall DPS&lt;/li>
&lt;/ul>
&lt;h2 id="charge-blade">Charge Blade&lt;/h2>
&lt;ul>
&lt;li>Elemental&lt;/li>
&lt;li>X -&amp;gt; A (hold) (full phials with load shells)&lt;/li>
&lt;li>X -&amp;gt; X -&amp;gt; X -&amp;gt; X+A -&amp;gt; repeat (allows for easy guard points)&lt;/li>
&lt;/ul>
&lt;h2 id="insect-glaive">Insect Glaive&lt;/h2>
&lt;ul>
&lt;li>X -&amp;gt; A -&amp;gt; A (best grounded combo)&lt;/li>
&lt;li>ZL+A -&amp;gt; ZR+A -&amp;gt; ZR+A -&amp;gt; ZL+A (only need 2 kinsect glide hits if using silkbind vault)&lt;/li>
&lt;/ul>
&lt;h2 id="light-bowgun">Light Bowgun&lt;/h2>
&lt;ul>
&lt;li>Wyvern counter useful for roars/monster pressure&lt;/li>
&lt;/ul>
&lt;h2 id="heavy-bowgun">Heavy Bowgun&lt;/h2>
&lt;ul>
&lt;li>Tackle through roars/weak attacks&lt;/li>
&lt;li>Sidestep after shots&lt;/li>
&lt;/ul>
&lt;h2 id="bow">Bow&lt;/h2>
&lt;ul>
&lt;li>Elemental, dash juice&lt;/li>
&lt;li>Shoot 1-2 arrows before starting dodgebolt dance&lt;/li>
&lt;/ul></description></item><item><title>FTL</title><link>https://dfar.io/posts/ftl/</link><pubDate>Sat, 25 Mar 2023 18:48:04 +0000</pubDate><guid>https://dfar.io/posts/ftl/</guid><description>&lt;h2 id="timing">Timing&lt;/h2>
&lt;p>Try to have the following by the end of these sectors&lt;/p>
&lt;p>Sector 1 - 2 shields
Sector 2 - offensive option
Sector 3 - engines 4
Sector 4 - 3 shields
Sector 5 - Cloaking
Sector 6 - 4 shields&lt;/p>
&lt;h2 id="sector-priority">Sector Priority&lt;/h2>
&lt;ul>
&lt;li>Pirate, Rebel Controlled&lt;/li>
&lt;li>Any Green&lt;/li>
&lt;li>Skip Nebula, Abandoned&lt;/li>
&lt;/ul>
&lt;h2 id="crew-assignment">Crew Assignment&lt;/h2>
&lt;p>Human - all-rounder
Engi - repairs
Zoltan - engine, weapons
Rock - pilot
Mantis - boarding/defense
Lanius - boarding/defense
Slug - shields, all-rounder&lt;/p></description></item><item><title>Nestjs Azure App Service Deployment</title><link>https://dfar.io/posts/nestjs-azure-app-service-deployment/</link><pubDate>Sat, 18 Mar 2023 14:44:13 +0000</pubDate><guid>https://dfar.io/posts/nestjs-azure-app-service-deployment/</guid><description>&lt;p>Needed to do a few things to get this working:&lt;/p>
&lt;p>Modify &lt;code>main.js&lt;/code> to allow for listing to environment variable for port number.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">listen&lt;/span>(&lt;span style="color:#a6e22e">process&lt;/span>.&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">PORT&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">3000&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Set the startup command on the App Service to&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pm2 start dist/main.js --no-daemon
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://azureossd.github.io/2022/02/11/Nest-Deployment-on-App-Service-Linux/index.html">Reference&lt;/a>&lt;/p></description></item><item><title>Fixing MSBuild TARGETPATH Issue</title><link>https://dfar.io/posts/fixing-msbuild-targetpath-issue/</link><pubDate>Mon, 20 Feb 2023 14:05:10 +0000</pubDate><guid>https://dfar.io/posts/fixing-msbuild-targetpath-issue/</guid><description>&lt;p>Ran into an issue that was causing the following error on GitLab when trying
to build a package:&lt;/p>
&lt;pre tabindex="0">&lt;code>/usr/share/dotnet/sdk/7.0.103/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(221,5): error NU5026: The file &amp;#39;${TARGETPATH}&amp;#39; to be packed was not found on disk. [/hugo servbuilds/organization/My.Project/My.Project/My.Project.csproj]
&lt;/code>&lt;/pre>&lt;p>The solution is to define TargetPath explicitly in all &lt;code>.csproj&lt;/code> files by adding a PropertyGroup section like so:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;!-- fixes TARGETPATH issue --&amp;gt;
&amp;lt;PropertyGroup&amp;gt;
&amp;lt;TargetPath&amp;gt;$(ProjectDir)$(OutputPath)$(ProjectFileName)&amp;lt;/TargetPath&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>Cooking Lobster Tails</title><link>https://dfar.io/posts/cooking-lobster-tails/</link><pubDate>Sun, 20 Nov 2022 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/cooking-lobster-tails/</guid><description>&lt;h2 id="ingredients">Ingredients&lt;/h2>
&lt;ul>
&lt;li>2 lobster tails&lt;/li>
&lt;li>old bay&lt;/li>
&lt;li>butter&lt;/li>
&lt;/ul>
&lt;h2 id="process">Process&lt;/h2>
&lt;ol>
&lt;li>Pre-heat over to 400F&lt;/li>
&lt;li>Melt 4 tbsp butter&lt;/li>
&lt;li>Add 1/2 tbsp old bay to melted butter, stir&lt;/li>
&lt;li>Prep tails (cut legs, press bottom, cut back, remove meat)&lt;/li>
&lt;li>Add light old bay to tails&lt;/li>
&lt;li>Rub half of sauce on front &amp;amp; back of tails&lt;/li>
&lt;li>Bake 15 minutes&lt;/li>
&lt;li>Add remaining sauce to cooked tails&lt;/li>
&lt;/ol></description></item><item><title>Getting Started With Playwright</title><link>https://dfar.io/posts/getting-started-with-playwright/</link><pubDate>Sat, 14 May 2022 13:01:41 +0000</pubDate><guid>https://dfar.io/posts/getting-started-with-playwright/</guid><description>&lt;ul>
&lt;li>&lt;a href="#setting-up-with-vscode">Setting up with VSCode&lt;/a>&lt;/li>
&lt;li>&lt;a href="#setting-up-video-playback">Setting up video playback&lt;/a>&lt;/li>
&lt;li>&lt;a href="#setting-up-local-environment-variables-with-env">Setting up local environment variables with .env&lt;/a>&lt;/li>
&lt;li>&lt;a href="#setting-up-github-actions">Setting up Github Actions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#upload-github-action-video-artifacts-on-failure">Upload Github Action video artifacts on failure&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="setting-up-with-vscode">Setting up with VSCode&lt;/h2>
&lt;ol>
&lt;li>Create a dev container using the Ubuntu image (include Node.js), then rebuild into dev container&lt;/li>
&lt;li>Install Playwright into your project with &lt;code>npm i -D playwright&lt;/code>&lt;/li>
&lt;li>Add the following &lt;code>postCreateCommand&lt;/code> in &lt;code>.devcontainer/devcontainer.json&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;postCreateCommand&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;rm -rf node_modules &amp;amp;&amp;amp; npm i&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>Add the following to &lt;code>package.json&lt;/code>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;postinstall&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;npx playwright install &amp;amp;&amp;amp; npx playwright install-deps&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>Create &lt;a href="https://playwright.dev/docs/library#first-script">the first script&lt;/a>, run using &lt;code>node main.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="setting-up-video-playback">Setting up video playback&lt;/h2>
&lt;p>This allows for video playback to occur of all runs, very useful for debugging issues. An example where video will be played inside the &lt;code>try&lt;/code> block and will generate a video regardless of success or failure:&lt;/p></description></item><item><title>Bulgogi notes</title><link>https://dfar.io/posts/bulgogi-notes/</link><pubDate>Fri, 18 Mar 2022 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/bulgogi-notes/</guid><description>&lt;h2 id="ingredients">Ingredients&lt;/h2>
&lt;ul>
&lt;li>1 lb steak (tenderloin, sirloin, ribeye, flank)&lt;/li>
&lt;li>4 garlic gloves (or 4 tsp)&lt;/li>
&lt;li>2 green onions&lt;/li>
&lt;li>3 tbsp water&lt;/li>
&lt;li>2 tbsp soy sauce&lt;/li>
&lt;li>2 tbsp sugar (white or brown)&lt;/li>
&lt;li>1 tbsp sesame oil&lt;/li>
&lt;li>black pepper&lt;/li>
&lt;li>1 tbsp sesame seeds&lt;/li>
&lt;/ul>
&lt;h2 id="process">Process&lt;/h2>
&lt;ol>
&lt;li>Get steak to slight frozen state&lt;/li>
&lt;li>Mix marinade, stir until dissolved&lt;/li>
&lt;li>Cut steak into thin slices&lt;/li>
&lt;li>Add steak to marinade bowl, mix&lt;/li>
&lt;li>Cover, fridge for 30 min&lt;/li>
&lt;li>Clean and start rice&lt;/li>
&lt;li>Pull steak, cook using skillet.&lt;/li>
&lt;/ol></description></item><item><title>Carbonara Recipe</title><link>https://dfar.io/posts/carbonara-recipe/</link><pubDate>Fri, 18 Mar 2022 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/carbonara-recipe/</guid><description>&lt;h2 id="ingredients">Ingredients&lt;/h2>
&lt;ul>
&lt;li>1/2 package bacon&lt;/li>
&lt;li>1lb spaghetti&lt;/li>
&lt;li>8 eggs&lt;/li>
&lt;li>1 cup grated parmesan, pecorino&lt;/li>
&lt;/ul>
&lt;h2 id="process">Process&lt;/h2>
&lt;ol>
&lt;li>Start boiling water, heating saute pan.&lt;/li>
&lt;li>Dice bacon, cook on low until crisp, place on paper towel plate.&lt;/li>
&lt;li>Grate cheese, add to bowl with eggs (4 whole, 4 yokes) and mix. Add pepper.&lt;/li>
&lt;li>Add salt to water, cook pasta ~11 minutes.&lt;/li>
&lt;li>Remove pasta from pot into saute pan.&lt;/li>
&lt;li>Add separate 3/4 cup water to cheese mixture.&lt;/li>
&lt;li>Add sauce, mix.&lt;/li>
&lt;li>Add bacon, mix.&lt;/li>
&lt;/ol></description></item><item><title>Instant Pot Clam Chowder Recipe</title><link>https://dfar.io/posts/instant-pot-clam-chowder-recipe/</link><pubDate>Fri, 18 Mar 2022 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/instant-pot-clam-chowder-recipe/</guid><description>&lt;h2 id="ingredients">Ingredients&lt;/h2>
&lt;ul>
&lt;li>3x 6.5oz canned clams&lt;/li>
&lt;li>1 cup heavy whipping cream&lt;/li>
&lt;li>1 tbsp butter&lt;/li>
&lt;li>1 onion (pre-diced)&lt;/li>
&lt;li>2 potatoes&lt;/li>
&lt;li>2 celery ribs&lt;/li>
&lt;li>1/2 package bacon&lt;/li>
&lt;li>3 tbsp flour&lt;/li>
&lt;li>1 cup chicken broth&lt;/li>
&lt;li>old bay&lt;/li>
&lt;li>corn starch&lt;/li>
&lt;li>garlic&lt;/li>
&lt;/ul>
&lt;h2 id="process">Process&lt;/h2>
&lt;ol>
&lt;li>Peel &amp;amp; dice potatoes&lt;/li>
&lt;li>IP Saute on more, add butter&lt;/li>
&lt;li>Dice bacon, cook to translucent&lt;/li>
&lt;li>Make 1 cup chicken broth, strain clams&lt;/li>
&lt;li>Dice onion, celery, cook to translucent&lt;/li>
&lt;li>Add 3 tbsp flour, cook 1 min&lt;/li>
&lt;li>Add clam juice &amp;amp; chicken broth, stir&lt;/li>
&lt;li>Add potatoes, garlic, salt/pepper (20), stir&lt;/li>
&lt;li>Cook manual high 5 minutes, vent&lt;/li>
&lt;li>IP Saute, add clams, heavy whipping cream, old bay&lt;/li>
&lt;li>Add 2 tbsp corn starch slurry, cook until thicken&lt;/li>
&lt;/ol>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=hXsGhq82CAI">YouTube&lt;/a>&lt;/p></description></item><item><title>Pizza notes</title><link>https://dfar.io/posts/pizza-notes/</link><pubDate>Fri, 18 Mar 2022 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/pizza-notes/</guid><description>&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;ol>
&lt;li>Split dough into 3 parts.&lt;/li>
&lt;li>Place cornmeal.&lt;/li>
&lt;li>Leave dough out for around 3-4 hours, wrapped in saran wrap.&lt;/li>
&lt;/ol>
&lt;h2 id="part-2">Part 2&lt;/h2>
&lt;ol>
&lt;li>Open chimney, start heating pizza oven, get to ~750F&lt;/li>
&lt;li>Once close, cover hands in flour, roll and poke dough.&lt;/li>
&lt;li>Add toppings.&lt;/li>
&lt;li>Place flour, than pizza on peel.&lt;/li>
&lt;li>Add to oven, partially close chimney.&lt;/li>
&lt;li>Pull and turn after 1 minute (2 min. total)&lt;/li>
&lt;/ol></description></item><item><title>Azure 204 Notes</title><link>https://dfar.io/posts/az-204-notes/</link><pubDate>Tue, 02 Nov 2021 22:38:48 +0000</pubDate><guid>https://dfar.io/posts/az-204-notes/</guid><description>&lt;h2 id="create-serverless-applications">Create Serverless Applications&lt;/h2>
&lt;ul>
&lt;li>Logic Apps - design first, for Devs, GUI/Code, provides integrations&lt;/li>
&lt;li>Microsoft Power Automate - design first, for BAs/users, GUI only, self-service&lt;/li>
&lt;li>WebJobs - code first, runs program/script automatically, control of JobHost and retry logic&lt;/li>
&lt;li>Azure Function - code first, most versatile, should be default option&lt;/li>
&lt;/ul>
&lt;h3 id="azure-functions">Azure Functions&lt;/h3>
&lt;ul>
&lt;li>Pay-as-you-go - cheap to use&lt;/li>
&lt;li>Stateless&lt;/li>
&lt;li>Event driven (multiple options)&lt;/li>
&lt;li>Limited execution time/frequency (5 mins)&lt;/li>
&lt;li>Can use Consumption plan (serverless) or App Service (dedicated, avoids cold starts)&lt;/li>
&lt;li>Monitoring possible through App. Insights&lt;/li>
&lt;/ul>
&lt;h4 id="terminology">Terminology&lt;/h4>
&lt;ul>
&lt;li>Inputs - data/file provided&lt;/li>
&lt;li>Actions - operations&lt;/li>
&lt;li>Conditions - check if logic&lt;/li>
&lt;li>Output - created data/file&lt;/li>
&lt;li>Triggers - events&lt;/li>
&lt;li>Bindings - connects data/services to function (potentially w/o code)&lt;/li>
&lt;/ul>
&lt;h4 id="http-trigger-security">HTTP Trigger Security&lt;/h4>
&lt;ul>
&lt;li>Function - function-specific or admin key&lt;/li>
&lt;li>Admin - admin key only&lt;/li>
&lt;li>Anonymous - no key required&lt;/li>
&lt;/ul>
&lt;p>Can be provided by either:&lt;/p></description></item><item><title>Lambchops Recipe</title><link>https://dfar.io/posts/lambchops-recipe/</link><pubDate>Fri, 21 May 2021 00:59:43 +0000</pubDate><guid>https://dfar.io/posts/lambchops-recipe/</guid><description>&lt;h2 id="ingredients">Ingredients&lt;/h2>
&lt;ul>
&lt;li>Lollipop lamb chops&lt;/li>
&lt;li>Salt &amp;amp; pepper&lt;/li>
&lt;li>Rosemary&lt;/li>
&lt;li>Thyme&lt;/li>
&lt;li>Olive oil&lt;/li>
&lt;li>Oregano&lt;/li>
&lt;/ul>
&lt;h2 id="marinate">Marinate&lt;/h2>
&lt;ol>
&lt;li>Combine garlic, salt, rosemary, thyme, oil into bowl.&lt;/li>
&lt;li>Mix until well-blended.&lt;/li>
&lt;li>Place lamb chops and marinade into bag.&lt;/li>
&lt;li>Store for at least 2 hours.&lt;/li>
&lt;/ol>
&lt;h2 id="process">Process&lt;/h2>
&lt;ol>
&lt;li>Preheat grill on high.&lt;/li>
&lt;li>Lay lamb chops onto cutting board, sprinkle pepper.&lt;/li>
&lt;li>After pre-heat, use non-stick on grill.&lt;/li>
&lt;li>Cook for 4 minutes.&lt;/li>
&lt;li>Flip, cook for 2-5 minutes (rare to medium)&lt;/li>
&lt;li>Season with oregano leaves.&lt;/li>
&lt;/ol></description></item><item><title>Chocolate Strawberries Recipe</title><link>https://dfar.io/posts/chocolate-strawberries-recipe/</link><pubDate>Sun, 25 Apr 2021 21:02:07 +0000</pubDate><guid>https://dfar.io/posts/chocolate-strawberries-recipe/</guid><description>&lt;h2 id="needed">Needed&lt;/h2>
&lt;ul>
&lt;li>Chocolate Baking Chips&lt;/li>
&lt;li>Strawberries&lt;/li>
&lt;li>Pot and bowl (for double boiler)&lt;/li>
&lt;li>Wax paper&lt;/li>
&lt;li>Baking tray&lt;/li>
&lt;/ul>
&lt;h2 id="procedure">Procedure&lt;/h2>
&lt;ol>
&lt;li>Start boiling 1 inch of water in pot.&lt;/li>
&lt;li>Dry strawberries, place on paper towel.&lt;/li>
&lt;li>Setup bowl with 2/3 chocolate chips.&lt;/li>
&lt;li>Setup baking tray with wax paper.&lt;/li>
&lt;li>Once boiling, lower heat, place bowl on top.&lt;/li>
&lt;li>Stir until melted.&lt;/li>
&lt;li>Add 1/3 chocolate chips, stir until melted.&lt;/li>
&lt;li>Dip strawberries, place onto wax paper.&lt;/li>
&lt;li>Place in fridge for at least an hour.&lt;/li>
&lt;/ol></description></item><item><title>Scaffolding a Ruby on Rails Api</title><link>https://dfar.io/posts/scaffold-a-rails-api/</link><pubDate>Sat, 06 Mar 2021 19:00:45 +0000</pubDate><guid>https://dfar.io/posts/scaffold-a-rails-api/</guid><description>&lt;h2 id="visual-studio-code-setup">Visual Studio Code Setup&lt;/h2>
&lt;p>First, I recommend getting VSCode&amp;rsquo;s Remote Container set up to allow for container-based development and not requiring adding dependencies to your local machine.&lt;/p>
&lt;p>Create a directory that will store your Rails project.&lt;/p>
&lt;p>&lt;code>mkdir rails-api&lt;/code>
&lt;code>cd rails-api&lt;/code>&lt;/p>
&lt;p>Then download the Remote Containers VSCode extension, and add a &lt;code>.devcontainer&lt;/code> file using the Ruby on Rails community image.&lt;/p>
&lt;h2 id="scaffolding-the-rails-api">Scaffolding the Rails API&lt;/h2>
&lt;p>Inside the container, create the Rails API using &lt;code>rails new . --api&lt;/code>.&lt;/p></description></item><item><title>Air Fryer Chicken Wings Recipe</title><link>https://dfar.io/posts/air-fryer-chicken-wings-recipe/</link><pubDate>Sat, 27 Feb 2021 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/air-fryer-chicken-wings-recipe/</guid><description>&lt;h2 id="ingredients">Ingredients&lt;/h2>
&lt;ul>
&lt;li>Olive oil&lt;/li>
&lt;li>Salt &amp;amp; Pepper&lt;/li>
&lt;li>Old Bay Seasoning&lt;/li>
&lt;li>1 lb thawed chicken wings&lt;/li>
&lt;/ul>
&lt;p>Cooks ~8 chicken wings&lt;/p>
&lt;h2 id="process">Process&lt;/h2>
&lt;ol>
&lt;li>Preheat Air Fryer to 400F&lt;/li>
&lt;li>Pat wings dry&lt;/li>
&lt;li>Toss Wings in a bowl with oil, salt, pepper, and Old Bay.&lt;/li>
&lt;li>Cook for 7 min&lt;/li>
&lt;li>Turn and cook another 7 min&lt;/li>
&lt;/ol></description></item><item><title>Instant Pot Tomato Bisque Recipe</title><link>https://dfar.io/posts/instant-pot-tomato-bisque-recipe/</link><pubDate>Tue, 23 Feb 2021 13:39:58 +0000</pubDate><guid>https://dfar.io/posts/instant-pot-tomato-bisque-recipe/</guid><description>&lt;h2 id="ingredients">Ingredients&lt;/h2>
&lt;ul>
&lt;li>1 tbsp butter &lt;em>or olive oil&lt;/em>&lt;/li>
&lt;li>1/4 onion, diced&lt;/li>
&lt;li>29oz &lt;a href="https://www.costco.com/kirkland-signature-organic-diced-tomatoes%2C-14.5-oz%2C-8-count.product.100334857.html">diced tomatoes&lt;/a>&lt;/li>
&lt;li>1 tbsp sugar&lt;/li>
&lt;li>1 cup chicken broth&lt;/li>
&lt;li>1 tbsp dried basil&lt;/li>
&lt;li>1/2 cup heavy cream&lt;/li>
&lt;li>&lt;em>6 celery sticks, diced&lt;/em>&lt;/li>
&lt;li>&lt;em>3 carrots, diced&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Requires a blender (immersion is best)&lt;/p>
&lt;p>Serves about 4-5 cups.&lt;/p>
&lt;h2 id="process">Process&lt;/h2>
&lt;ol>
&lt;li>Heat the Instant Pot on saute, melt butter, cook onions, celery, carrots for 5 minutes.&lt;/li>
&lt;li>Add tomatoes, sugar, broth, and basil over onions. Stir and cover Instant Pot
and cook on manual high pressure 15 minutes.&lt;/li>
&lt;li>Release the pressure, and blend mix until smooth.&lt;/li>
&lt;li>Add heavy cream and stir.&lt;/li>
&lt;/ol>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a href="https://www.thispilgrimlife.com/instant-pot-creamy-tomato-soup/">This Pilgrim Life Recipe&lt;/a>&lt;/p></description></item><item><title>Installing Arch Linux</title><link>https://dfar.io/installing-arch-linux/</link><pubDate>Mon, 01 Feb 2021 17:19:44 +0000</pubDate><guid>https://dfar.io/installing-arch-linux/</guid><description>&lt;h2 id="setting-up-usb-boot-media">Setting up USB Boot Media&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/USB_flash_installation_medium#Using_basic_command_line_utilities">Arch Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://superuser.com/a/1387874">Windows (using Arch Linux)&lt;/a>&lt;/li>
&lt;li>Windows – use &lt;a href="https://wiki.archlinux.org/index.php/USB_flash_installation_media#Using_Rufus">Rufus&lt;/a> (you may need to use GPT &amp;amp;&amp;amp; DD image mode)&lt;/li>
&lt;/ul>
&lt;h2 id="windows-installation">Windows Installation&lt;/h2>
&lt;p>When dual-booting both Windows and Arch Linux, install Windows first using a smaller partition and install any software required.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>First, boot the Arch Linux USB stick onto the computer of choice. After finished loading, you should see a command terminal.&lt;/p>
&lt;p>To increase font size during install, use:&lt;/p></description></item><item><title>Configuring Arch Linux</title><link>https://dfar.io/configuring-arch-linux/</link><pubDate>Mon, 01 Feb 2021 02:25:02 +0000</pubDate><guid>https://dfar.io/configuring-arch-linux/</guid><description>&lt;p>If you’re &lt;a href="https://dfar.io/installing-arch-linux/">installed Arch Linux&lt;/a>, the next step is configuring the system to work as desired. In this guide, I walk through my general configuration of a newly installed Arch Linux instance.&lt;/p>
&lt;h2 id="configure-internet">Configure Internet&lt;/h2>
&lt;p>Set up &lt;strong>networkmanager&lt;/strong> and if wireless, connect to an internet source:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo systemctl enable NetworkManager.service
sudo systemctl start NetworkManager.service
&lt;/code>&lt;/pre>&lt;h1 id="connect-to-wireless">connect to wireless&lt;/h1>
&lt;pre tabindex="0">&lt;code>nmcli device wifi list
nmcli device wifi connect SSID password PASSWORD
&lt;/code>&lt;/pre>&lt;p>Confirm access using &lt;code>ping&lt;/code>.&lt;/p>
&lt;h2 id="set-up-desktop-environment">Set up Desktop Environment&lt;/h2>
&lt;p>Set up &lt;code>xorg&lt;/code> by install the following packages:&lt;/p></description></item><item><title>Adding Nunit Project to nopCommerce Plugin</title><link>https://dfar.io/posts/adding-nunit-project-to-nopcommerce-plugin/</link><pubDate>Tue, 12 Jan 2021 11:59:19 -0500</pubDate><guid>https://dfar.io/posts/adding-nunit-project-to-nopcommerce-plugin/</guid><description>&lt;p>I&amp;rsquo;ve been working on integrating SonarClodu into the nopCommerce Plugin
development workflow, and came across a procedure that helps with building
out a plugin with the ability to easily integrate it into a fresh copy of
nopCommerce.&lt;/p>
&lt;p>As an example, you can see it in the &lt;a href="https://github.com/dfar-io/freshaddress-integration-for-nopcommerce">FreshAddress Integration Plugin source code&lt;/a>.&lt;/p>
&lt;h2 id="plugin-folder-structure">Plugin Folder Structure&lt;/h2>
&lt;pre tabindex="0">&lt;code>.github/workflows
Source
Plugin Project
Tests
Test project
.gitignore
LICENSE
README.md
sonar-helper.sh
&lt;/code>&lt;/pre>&lt;p>A few things to take apart here:&lt;/p></description></item><item><title>Fixing Token Authentication in Azure Static Web Apps</title><link>https://dfar.io/posts/fixing-token-authentication-in-azure-static-web-apps/</link><pubDate>Sun, 03 Jan 2021 14:00:36 -0500</pubDate><guid>https://dfar.io/posts/fixing-token-authentication-in-azure-static-web-apps/</guid><description>&lt;p>I recently moved my app &lt;a href="https://www.journally.io/">Journally&lt;/a> over to an Azure
Static Web App in order to save on costs and explore the new technology. When I
switched over, I found that anything related to using a bearer token was no
longer working.&lt;/p>
&lt;p>A little bit of searching found &lt;a href="https://github.com/Azure/static-web-apps/issues/34">this post&lt;/a>,
basically saying that Azure Static Web Apps uses the &lt;code>Authorization&lt;/code> header when
communication between the UI and Function API. Easy solution: I changed Journally
to use &lt;code>JournallyAuthorization&lt;/code> instead of &lt;code>Authorization&lt;/code>, and everything works
after that.&lt;/p></description></item><item><title>Migrating From WordPress to Hugo</title><link>https://dfar.io/posts/migrating-from-wordpress-to-hugo/</link><pubDate>Thu, 03 Dec 2020 19:10:30 -0500</pubDate><guid>https://dfar.io/posts/migrating-from-wordpress-to-hugo/</guid><description>&lt;p>I decided to clean up my website and move to a static site for a few reasons:&lt;/p>
&lt;ul>
&lt;li>Start using MarkDown more frequently, as I&amp;rsquo;ve grown to really like it for documentation.&lt;/li>
&lt;li>Cut down on costs of hosting the WordPress site.&lt;/li>
&lt;li>Simplify the overall design.&lt;/li>
&lt;/ul>
&lt;p>In the migration process, I had to do a few things to get the site fully migrated over.&lt;/p>
&lt;h2 id="deploying-to-github-pages-using-github-actions">Deploying to Github Pages using Github Actions&lt;/h2>
&lt;p>First, I created the Hugo site by following the
&lt;a href="https://gohugo.io/getting-started/quick-start/">Quick Start Guide&lt;/a> at Hugo,
picking a theme, then committing the changes to my Github in a repo named &lt;!-- raw HTML omitted -->.github.io. &lt;em>I also added a
&lt;em>.gitignore&lt;/em> file that wasn&amp;rsquo;t included.&lt;/em>&lt;/p></description></item><item><title>Sending Azure App Service .NET Core Logs to Graylog</title><link>https://dfar.io/sending-azure-app-service-net-core-logs-to-graylog/</link><pubDate>Mon, 23 Nov 2020 18:09:25 +0000</pubDate><guid>https://dfar.io/sending-azure-app-service-net-core-logs-to-graylog/</guid><description>&lt;h2 id="pre-requisites">Pre-requisites&lt;/h2>
&lt;p>You’ll need:&lt;/p>
&lt;ul>
&lt;li>A Graylog instance running to send logs to, which should be running a GELF UDP input.&lt;/li>
&lt;li>A .NET Core application to send logs from.&lt;/li>
&lt;li>An Azure App Service to host the above application.&lt;/li>
&lt;/ul>
&lt;h2 id="procedure">Procedure&lt;/h2>
&lt;p>First, add the following packages to your application:&lt;/p>
&lt;ul>
&lt;li>Serilog.AspNetCore&lt;/li>
&lt;li>Serilog.Sinks.Graylog&lt;/li>
&lt;/ul>
&lt;p>Next, add the following to &lt;code>Program.cs&lt;/code>, at the bottom of the CreateDefaultBuilder method:&lt;/p>
&lt;pre tabindex="0">&lt;code>.UseSerilog((hostingContext, loggerConfiguration) =&amp;gt;
loggerConfiguration.ReadFrom
.Configuration(hostingContext.Configuration));
&lt;/code>&lt;/pre>&lt;p>Next, configure the &lt;code>appsettings.json&lt;/code>file, cleaning the existing Logging config and adding the following:&lt;/p></description></item><item><title>Running Multi-Store NopCommerce Locally</title><link>https://dfar.io/running-multi-store-nopcommerce-locally/</link><pubDate>Tue, 10 Nov 2020 17:31:33 +0000</pubDate><guid>https://dfar.io/running-multi-store-nopcommerce-locally/</guid><description>&lt;p>To run NopCommerce locally, you’ll need to set up a few things.&lt;/p>
&lt;p>First, make an entry in your &lt;code>hosts&lt;/code> file for each of the different stores, like so:&lt;/p>
&lt;pre tabindex="0">&lt;code>127.0.0.1 store1.local
127.0.0.1 store2.local
&lt;/code>&lt;/pre>&lt;p>Then inside your store settings, set the following for each store: &lt;a href="https://dfar.io/wp-content/uploads/2020/11/image-1024x197.png">https://dfar.io/wp-content/uploads/2020/11/image-1024x197.png&lt;/a>&lt;/p>
&lt;p>Finally, check that you can access the stores using the store URL provided.&lt;/p></description></item><item><title>Automatically Clean Artifactory Artifacts</title><link>https://dfar.io/automatically-clean-artifactory-artifacts/</link><pubDate>Tue, 14 Jul 2020 14:24:59 +0000</pubDate><guid>https://dfar.io/automatically-clean-artifactory-artifacts/</guid><description>&lt;p>If you’re running into issues with artifacts taking up too much space on your Artifactory server, this will set you up with a programmatic way to clean old artifacts as they are no longer required.&lt;/p>
&lt;h2 id="install-artifactcleanup-plugin">Install ArtifactCleanup Plugin&lt;/h2>
&lt;p>SSH into the Artifactory server, go into the &lt;code>$JFROG_HOME/etc/plugins&lt;/code> directory and run the following to download the &lt;a href="https://github.com/jfrog/artifactory-user-plugins/tree/master/cleanup/artifactCleanup">Artifact Cleanup plugin&lt;/a>:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Make changes to the &lt;code>artifactCleanup.json&lt;/code> file based on desired behavior.&lt;/p></description></item><item><title>Access Artifactory Securely with Kubernetes</title><link>https://dfar.io/access-artifactory-securely-with-kubernetes/</link><pubDate>Tue, 30 Jun 2020 18:17:53 +0000</pubDate><guid>https://dfar.io/access-artifactory-securely-with-kubernetes/</guid><description>&lt;p>To allow Kubernetes to download images from a secured Artifactory instance (for example, an instance that doesn’t allow anonymous access):&lt;/p>
&lt;h2 id="artifactory-user-setup">Artifactory User Setup&lt;/h2>
&lt;ol>
&lt;li>Create a user in Artifactory to serve as the service principal.&lt;/li>
&lt;li>Log into this user and create an API token.&lt;/li>
&lt;/ol>
&lt;h2 id="docker-credentials">Docker Credentials&lt;/h2>
&lt;p>With the API token, log into the Docker instance (username is service account username, password is API key):&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Once logged in successfully, access the &lt;code>config.json&lt;/code> file created to get the token to use.&lt;/p></description></item><item><title>Restricting Access to App Services and Function Apps</title><link>https://dfar.io/restricting-access-to-app-services-and-function-apps/</link><pubDate>Fri, 19 Jun 2020 13:20:13 +0000</pubDate><guid>https://dfar.io/restricting-access-to-app-services-and-function-apps/</guid><description>&lt;h2 id="restrict-by-function">Restrict By Function&lt;/h2>
&lt;p>Restriction by function works well since it gives you granular control over functions. An appropriate application would be giving the key to other applications, and then having those applications use the key to access.&lt;/p>
&lt;p>There are three levels to restrict a function:&lt;/p>
&lt;ul>
&lt;li>Anonymous – no restrictions&lt;/li>
&lt;li>Function – restricted by an individual function key&lt;/li>
&lt;li>Admin – uses the admin key defined in the function app&lt;/li>
&lt;/ul>
&lt;p>When calling the function, there are two ways to do so, using either a query string:&lt;/p></description></item><item><title>Connecting An Azure Function App to Loggly</title><link>https://dfar.io/connecting-an-azure-function-app-to-loggly/</link><pubDate>Tue, 16 Jun 2020 00:53:43 +0000</pubDate><guid>https://dfar.io/connecting-an-azure-function-app-to-loggly/</guid><description>&lt;p>Doing the following will get a Function App hooked up to Loggly.&lt;/p>
&lt;ol>
&lt;li>Create an Event Hub namespace, and an Event Hub.&lt;/li>
&lt;li>Create a Function App, and an Event Hub function.&lt;/li>
&lt;li>Create a Loggly HTTP/S Event Endpoint, and get the URL endpoint.&lt;/li>
&lt;li>Update the Event Hub trigger with &lt;!-- raw HTML omitted -->this code&lt;!-- raw HTML omitted --> (use test to verify)&lt;/li>
&lt;li>Create a HTTP Trigger function.&lt;/li>
&lt;li>In the Function App’s diagnostic settings, turn on FunctionAppLogs and stream to the Event Hub.&lt;/li>
&lt;li>Call the HTTP trigger endpoint and verify results in Loggly.&lt;/li>
&lt;/ol>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a href="https://www.loggly.com/blog/how-to-stream-logs-from-azure-resources-to-loggly/">https://www.loggly.com/blog/how-to-stream-logs-from-azure-resources-to-loggly/&lt;/a>&lt;/p></description></item><item><title>Creating an Angular and Azure Function API App with Azure Static Web App</title><link>https://dfar.io/creating-an-angular-and-azure-function-api-app-with-azure-static-web-app/</link><pubDate>Wed, 27 May 2020 01:12:28 +0000</pubDate><guid>https://dfar.io/creating-an-angular-and-azure-function-api-app-with-azure-static-web-app/</guid><description>&lt;p>Recently, Azure released Azure Static Web Apps, which looks like a way to host static web sites easily. Some of the perks I see immediately are:&lt;/p>
&lt;ul>
&lt;li>Works well with SPA technologies (Angular, React, Vue)&lt;/li>
&lt;li>Serve an API using Azure Functions&lt;/li>
&lt;li>Automatic integration with GitHub and GitHub Actions to deploy immediately&lt;/li>
&lt;li>Currently costs nothing (while this is in preview)&lt;/li>
&lt;/ul>
&lt;h2 id="pre-requisites">Pre-requisites&lt;/h2>
&lt;p>To get started, you’ll need:&lt;/p>
&lt;ul>
&lt;li>Angular CLI&lt;/li>
&lt;li>Azure Functions Core Tools&lt;/li>
&lt;li>An Azure account&lt;/li>
&lt;/ul>
&lt;h2 id="create-a-github-repo-with-angular-and-azure-function-apps">Create a GitHub Repo with Angular and Azure Function Apps&lt;/h2>
&lt;p>First, create a repo in your GitHub account, and clone that repo to your local PC.&lt;/p></description></item><item><title>Adding Settings to a Plugin in NopCommerce (pre-4.00)</title><link>https://dfar.io/adding-settings-to-a-plugin-in-nopcommerce-pre-4-00/</link><pubDate>Thu, 30 Apr 2020 13:00:34 +0000</pubDate><guid>https://dfar.io/adding-settings-to-a-plugin-in-nopcommerce-pre-4-00/</guid><description>&lt;p>Once you’re &lt;!-- raw HTML omitted -->created a plugin for NopCommerce&lt;!-- raw HTML omitted -->, you’ll likely want to add the ability to configure settings inside the plugin for reference later.&lt;/p>
&lt;p>When adding this capability, we’re going to work on trying to make this as immutable as possible, to follow functional programming as best we can, just because it makes things a little cleaner and puts all of the conversion between the configuration model and settings object.&lt;/p></description></item><item><title>Recording HTTP Request Body with Java, Spring Boot and Application Insights</title><link>https://dfar.io/recording-http-request-body-with-java-spring-boot-and-application-insights/</link><pubDate>Thu, 23 Apr 2020 14:23:23 +0000</pubDate><guid>https://dfar.io/recording-http-request-body-with-java-spring-boot-and-application-insights/</guid><description>&lt;p>Building off of my previous post &lt;a href="https://dfar.io/integrate-application-insights-into-a-spring-boot-application/">about integrating App Insights into Spring Boot&lt;/a>, I also wanted to record the request body in each trace sent to Azure. This is especially useful when looking up failures, since you’ll be able to see the request body used that caused the failure.&lt;/p>
&lt;h2 id="important-note-regarding-privacy">Important Note Regarding Privacy&lt;/h2>
&lt;p>Before getting started, something to consider is the issue of privacy – by activating this, you’ll be storing request body information into Azure, which can be an issue if you’re dealing with sensitive information.&lt;/p></description></item><item><title>Integrate Application Insights into a Spring Boot Application</title><link>https://dfar.io/integrate-application-insights-into-a-spring-boot-application/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://dfar.io/integrate-application-insights-into-a-spring-boot-application/</guid><description>&lt;p>To get started, we’ll set up a basic Spring Boot application, and then add Application Insights in the next step.&lt;/p>
&lt;h2 id="creating-a-skeleton-spring-boot-app">Creating a Skeleton Spring Boot App&lt;/h2>
&lt;p>To get started, go to &lt;!-- raw HTML omitted -->Spring Boot Initializr&lt;!-- raw HTML omitted --> and create an app with the following selected:&lt;/p>
&lt;ul>
&lt;li>Create a &lt;strong>gradle&lt;/strong> project&lt;/li>
&lt;li>Add the &lt;strong>Spring Web&lt;/strong> dependency&lt;/li>
&lt;/ul>
&lt;p>Once that’s done, extract the archive file given and open in your Java IDE of choice (IntelliJ, for example).&lt;/p></description></item><item><title>Developing with nopCommerce using VSCode and Linux</title><link>https://dfar.io/developing-with-nopcommerce-using-vscode-and-linux/</link><pubDate>Tue, 21 Apr 2020 15:59:00 +0000</pubDate><guid>https://dfar.io/developing-with-nopcommerce-using-vscode-and-linux/</guid><description>&lt;h2 id="pre-requisites">Pre-requisites&lt;/h2>
&lt;p>To get started, you’ll need to set up:&lt;/p>
&lt;ul>
&lt;li>VSCode with the C# and vscode-solution-explorer extensions installed&lt;/li>
&lt;li>&lt;a href="https://dfar.io/setting-up-sql-server-in-arch-linux/">SQL Server&lt;/a>&lt;/li>
&lt;li>dotnet SDK&lt;/li>
&lt;li>The library &lt;code>libgdiplus&lt;/code> to run RoxyFileman.&lt;/li>
&lt;/ul>
&lt;h2 id="download-and-build-nopcommerce-source-code">Download and Build nopCommerce Source Code&lt;/h2>
&lt;p>To get started, get a copy of the nopCommerce source code at &lt;!-- raw HTML omitted -->their Github page&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;p>After downloading the source code, open the /src folder using VSCode.&lt;/p>
&lt;p>For cleaning and building the project, you have two choices:&lt;/p></description></item><item><title>Setting up SQL Server in Arch Linux</title><link>https://dfar.io/setting-up-sql-server-in-arch-linux/</link><pubDate>Tue, 21 Apr 2020 14:49:05 +0000</pubDate><guid>https://dfar.io/setting-up-sql-server-in-arch-linux/</guid><description>&lt;p>First, install the AUR packages provided for installation:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Once installed, perform the configuration:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Once configured, there are a few ways to access the database:&lt;/p>
&lt;ul>
&lt;li>Using the &lt;strong>sqlcmd&lt;/strong> command line tool.&lt;/li>
&lt;li>Using the &lt;!-- raw HTML omitted -->VSCode mssql extension&lt;!-- raw HTML omitted -->.&lt;/li>
&lt;li>Using &lt;!-- raw HTML omitted -->Azure Data Studio&lt;!-- raw HTML omitted -->.&lt;/li>
&lt;/ul></description></item><item><title>Setting up A Jitsi Meet Server on Azure</title><link>https://dfar.io/setting-up-a-jitsi-meet-server-on-azure/</link><pubDate>Sat, 11 Apr 2020 19:01:39 +0000</pubDate><guid>https://dfar.io/setting-up-a-jitsi-meet-server-on-azure/</guid><description>&lt;p>With the COVID-19 pandemic going on, video chat is on the rise, with people using tools like Zoom, WebEx, and others. One option is to use an open-source solution like &lt;a href="https://jitsi.org/jitsi-meet/">Jitsi Meet&lt;/a>, which provides both a &lt;a href="https://jitsi.org/jitsi-meet/">public cloud version you can use easily&lt;/a>, and a version you can host on your own.&lt;/p>
&lt;p>Why host on your own? You should consider hosting on your own if:&lt;/p>
&lt;ul>
&lt;li>You’re concerned with security – hosting the software on your own ensures a third part is uninvolved.&lt;/li>
&lt;li>You want more hands on capability to change the specs on the server for performance based on when you’re using video software.&lt;/li>
&lt;li>You can control the location of the hardware, which depending on where everyone is located, may improve performance.&lt;/li>
&lt;/ul>
&lt;h2 id="server-creation-and-jitsi-installation">Server Creation and Jitsi Installation&lt;/h2>
&lt;p>First, create an Azure VM with the following:&lt;/p></description></item><item><title>Adding a Custom Method to a nopCommerce Core Service in a Plugin</title><link>https://dfar.io/adding-a-method-to-a-nopcommerce-core-service-in-a-plugin/</link><pubDate>Wed, 08 Apr 2020 18:28:18 +0000</pubDate><guid>https://dfar.io/adding-a-method-to-a-nopcommerce-core-service-in-a-plugin/</guid><description>&lt;p>In nopCommerce, you can extend a core service to include a new method and new functionality using both dependency injection and inheritance. For this example, we’ll use TaxService provided in &lt;strong>Nop.Services&lt;/strong>.&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>First, create a new interface in your plugin that inherits from the core service interface:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>After creating the interface, create the implementation class, inheriting from both the newly created interface and the base service:&lt;/p></description></item><item><title>Set up nopCommerce 4.2 on a Linux Azure VM</title><link>https://dfar.io/set-up-nopcommerce-4-2-on-a-linux-azure-vm/</link><pubDate>Mon, 09 Mar 2020 18:50:55 +0000</pubDate><guid>https://dfar.io/set-up-nopcommerce-4-2-on-a-linux-azure-vm/</guid><description>&lt;h2 id="infrastructure-setup">Infrastructure Setup&lt;/h2>
&lt;p>First, create a Ubuntu-based VM, opening ports 80, 443, and 22.&lt;/p>
&lt;p>Afterwards, create an Azure SQL Database.&lt;/p>
&lt;h2 id="vm-configuration">VM Configuration&lt;/h2>
&lt;p>Once all of the infrastructure is created, set up a DNS record for the public IP created for the VM to make access easier.&lt;/p>
&lt;p>Next, SSH into the VM using the domain name created above. Run the following commands to install the .NET Core runtime and SDK:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Next, install and enable nginx:&lt;/p></description></item><item><title>Set up Auto-Renewing Let’s Encrypt Certificates on App Service Linux</title><link>https://dfar.io/set-up-auto-renewing-lets-encrypt-certificates-on-app-service-linux/</link><pubDate>Mon, 09 Mar 2020 13:23:15 +0000</pubDate><guid>https://dfar.io/set-up-auto-renewing-lets-encrypt-certificates-on-app-service-linux/</guid><description>&lt;p>Set up the ability to assign auto-renewing Let’s Encrypt certs to an Azure App Service Linux instance with shibayan’s &lt;!-- raw HTML omitted -->appservice-acmebot&lt;!-- raw HTML omitted -->. This will create a Function App that automatically updates the App Service as needed.&lt;/p>
&lt;p>Before getting started, you’ll need to have a few things:&lt;/p>
&lt;ul>
&lt;li>An Azure App Service (Linux-based).&lt;/li>
&lt;li>DNS records being served using Azure DNS.&lt;/li>
&lt;/ul>
&lt;h2 id="procedure">Procedure&lt;/h2>
&lt;p>First, &lt;!-- raw HTML omitted -->deploy the solution&lt;!-- raw HTML omitted --> to your Azure subscription. Use the following for configation:&lt;/p></description></item><item><title>Quickly Work With Graylog Streams Using the API</title><link>https://dfar.io/quickly-work-with-graylog-streams-using-the-api/</link><pubDate>Fri, 28 Feb 2020 17:09:47 +0000</pubDate><guid>https://dfar.io/quickly-work-with-graylog-streams-using-the-api/</guid><description>&lt;p>When using Graylog, you may run into a case where you’re making a large number of streams to organize data. A quick way to do this is to use the API to programmatically add the streams to the system quickly.&lt;/p>
&lt;h2 id="authorization">Authorization&lt;/h2>
&lt;p>For authorization, you can use Basic Auth with your username and password.&lt;/p>
&lt;p>You can also create an access token to allow access for individual systems.&lt;/p>
&lt;h2 id="interact-with-api">Interact with API&lt;/h2>
&lt;p>Use the GET endpoint to get the streams payload:&lt;/p></description></item><item><title>Set up nopCommerce on an Azure VM</title><link>https://dfar.io/set-up-nopcommerce-on-an-azure-vm/</link><pubDate>Fri, 28 Feb 2020 01:51:07 +0000</pubDate><guid>https://dfar.io/set-up-nopcommerce-on-an-azure-vm/</guid><description>&lt;h2 id="setting-up-the-vm-and-deploying">Setting up the VM and Deploying&lt;/h2>
&lt;p>&lt;a href="https://docs.nopcommerce.com/developer/tutorials/azure-publish.html">https://docs.nopcommerce.com/developer/tutorials/azure-publish.html&lt;/a>&lt;/p>
&lt;h2 id="setting-up-let8217s-encrypt-https">Setting up Let’s Encrypt HTTPS&lt;/h2>
&lt;p>&lt;a href="https://weblog.west-wind.com/posts/2016/feb/22/using-lets-encrypt-with-iis-on-windows">https://weblog.west-wind.com/posts/2016/feb/22/using-lets-encrypt-with-iis-on-windows&lt;/a>&lt;/p></description></item><item><title>Setting up my Android Device</title><link>https://dfar.io/setting-up-my-android-device/</link><pubDate>Thu, 27 Feb 2020 01:59:30 +0000</pubDate><guid>https://dfar.io/setting-up-my-android-device/</guid><description>&lt;h2 id="initial-setup">Initial Setup&lt;/h2>
&lt;p>First, go through the default setup, connecting to Wi-Fi and Google.&lt;/p>
&lt;p>Turn off backup to Google Drive.&lt;/p>
&lt;p>Set up all of the methods of accessing phone (face recognition, etc.)&lt;/p>
&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;ul>
&lt;li>Turn on night mode.&lt;/li>
&lt;li>Set resolution to max.&lt;/li>
&lt;li>Set navigation bar to full screen gestures&lt;/li>
&lt;li>Show battery percentage&lt;/li>
&lt;li>Set sound mode to vibrate&lt;/li>
&lt;/ul>
&lt;p>Turn off Bixby home.&lt;/p>
&lt;p>Install the following apps from the Play Store:&lt;/p>
&lt;ul>
&lt;li>Outlook (login, turn off notifs, swipe right delete, turn off focused inbox, week start Monday, set calendar widget)&lt;/li>
&lt;li>Firefox (sign in)&lt;/li>
&lt;li>Messenger (sign in, turn on dark mode, turn off chat bubbles)&lt;/li>
&lt;li>Dropbox (sign in)&lt;/li>
&lt;li>Instagram (sign in)&lt;/li>
&lt;li>Netflix (sign in)&lt;/li>
&lt;li>YNAB (sign in)&lt;/li>
&lt;li>Slack (sign in)&lt;/li>
&lt;li>Fly Delta (sign in)&lt;/li>
&lt;li>Ecobee (sign in)&lt;/li>
&lt;li>Fi (sign in)&lt;/li>
&lt;li>Fitbit (sign in)&lt;/li>
&lt;li>WhatsApp (sign in, turn off notifs)&lt;/li>
&lt;/ul>
&lt;p>Configure the following:&lt;/p></description></item><item><title>Moving Resources to a Different Azure Tenant</title><link>https://dfar.io/moving-resources-to-a-different-azure-tenant/</link><pubDate>Sat, 22 Feb 2020 19:11:10 +0000</pubDate><guid>https://dfar.io/moving-resources-to-a-different-azure-tenant/</guid><description>&lt;p>Let’s say you have some resources in your Azure tenant that you want to move to a different tenant (such as if you’re going to transfer ownership of a particular set of resources to another company). You can do that with the following steps:&lt;/p>
&lt;h2 id="move-existing-resources-to-a-new-subscription">Move Existing Resources to A New Subscription&lt;/h2>
&lt;ol>
&lt;li>Create a new subscription in your current tenant as the current account admin (use your own information, which you will change over later so you can be an Account Admin).&lt;/li>
&lt;li>Rename the subscription to something more meaningful to avoid confusion.&lt;/li>
&lt;li>Sign into your tenant and move the desired resources over to the new subscription (you may need to recreate certain resources as some resources cannot be moved).
&lt;ol>
&lt;li>If running any VM backups, you’ll need to delete all images before you can move a VM over. After moving over, make sure to turn backups back on.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="transfer-subscription">Transfer Subscription&lt;/h2>
&lt;p>Next, create a new Microsoft account, and create an Azure account to transfer the subscription to – using the phone and credit card of the responsible party. When going through this process, you’ll either need the person by you when setting up the account, or have them set it up on their own.&lt;/p></description></item><item><title>Upgrading nopCommerce</title><link>https://dfar.io/upgrading-nopcommerce/</link><pubDate>Fri, 21 Feb 2020 14:37:19 +0000</pubDate><guid>https://dfar.io/upgrading-nopcommerce/</guid><description>&lt;p>Upgrading nopCommerce is a manual process that requires a decent amonut to work to get in place. When upgrading, you’ll need to upgrade sequentially (3.80 -&amp;gt; 3.90 -&amp;gt; 4.00 -&amp;gt; etc.).&lt;/p>
&lt;p>&lt;strong>NOTE&lt;/strong>: When performing this process on a live site, &lt;strong>make sure to close the store during the upgrade process&lt;/strong> so no changes occur on the site during upgrade.&lt;/p>
&lt;h2 id="upgrade-database">Upgrade Database&lt;/h2>
&lt;p>First, you’ll need to upgrade the database using a script provided by nopCommerce. &lt;a href="https://github.com/nopSolutions/nopCommerce/tree/develop/upgradescripts">Download the script here&lt;/a> based on the version and apply the changes in the SQL script to a copied version of the database.&lt;/p></description></item><item><title>Setting up Graylog in Azure</title><link>https://dfar.io/setting-up-graylog-in-azure/</link><pubDate>Thu, 20 Feb 2020 19:58:22 +0000</pubDate><guid>https://dfar.io/setting-up-graylog-in-azure/</guid><description>&lt;p>To get started with installing Graylog, do the following:&lt;/p>
&lt;p>Create a VM using the following:&lt;/p>
&lt;ul>
&lt;li>Image: Ubuntu 18.04 LTS&lt;/li>
&lt;li>Minimum Size: B2s (~$30/month)&lt;/li>
&lt;li>Open ports 80,443,22&lt;/li>
&lt;/ul>
&lt;p>SSH into the server and follow &lt;a href="https://docs.graylog.org/en/3.1/pages/installation/os/ubuntu.html">this guide&lt;/a> to get Graylog installed.&lt;/p>
&lt;p>To set up public access, set the following variables in Graylog config file (make sure to include the leading slash in external_uri):&lt;/p>
&lt;pre tabindex="0">&lt;code>http_bind_address = PRIVATE_IP
http_external_uri = http://&amp;lt;PUBLIC_IP&amp;gt;/
&lt;/code>&lt;/pre>&lt;p>Once fully installed, set up an Apache reverse proxy:&lt;/p></description></item><item><title>Setting up ELK in Azure with Bitnami</title><link>https://dfar.io/setting-up-elk-in-azure-with-bitnami/</link><pubDate>Thu, 20 Feb 2020 16:49:49 +0000</pubDate><guid>https://dfar.io/setting-up-elk-in-azure-with-bitnami/</guid><description>&lt;p>To get started with using ELk in Azure, do the following:&lt;/p>
&lt;p>Create a VM using the ‘&lt;em>ELK Certified by Bitnami&lt;/em>‘ image.&lt;/p>
&lt;p>Next, you’ll need to get the credentials to log into the application – look into the serial log of Boot Diagnostics of the VM to access the username and password. If needed, &lt;!-- raw HTML omitted -->a guide is available&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;p>Access the public IP of the VM created, and log in using the credentials above. Kibana should open up and allow for importing sample data.&lt;/p></description></item><item><title>Upgrading PHP in Ubuntu</title><link>https://dfar.io/upgrading-php-in-ubuntu/</link><pubDate>Fri, 14 Feb 2020 17:51:38 +0000</pubDate><guid>https://dfar.io/upgrading-php-in-ubuntu/</guid><description>&lt;p>Before doing this, I recommend backing up your system, in case things go wrong.&lt;/p>
&lt;p>To upgrade to the latest version of PHP in Ubuntu, first, update the system:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Then add the third-party repository:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Finally, upgrade PHP to &lt;!-- raw HTML omitted -->the latest version&lt;!-- raw HTML omitted -->:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>If upgrading PHP for WordPress, you’ll need a few more modules:&lt;/p></description></item><item><title>Using Azure Storage to Backup Data</title><link>https://dfar.io/using-azure-storage-to-backup-data/</link><pubDate>Tue, 11 Feb 2020 14:06:46 +0000</pubDate><guid>https://dfar.io/using-azure-storage-to-backup-data/</guid><description>&lt;p>If you’re looking for an easy and cheap way to back up infrequently used data, you can set up a storage account in Azure with the following settings:&lt;/p>
&lt;ul>
&lt;li>Location: closest to your location.&lt;/li>
&lt;li>Performance: Standard.&lt;/li>
&lt;li>Account Kind: BlobStorage&lt;/li>
&lt;li>Replication: Locally-redundant storage&lt;/li>
&lt;li>Access tier: Cool&lt;/li>
&lt;/ul>
&lt;p>After the storage account is created, you can upload your compressed files (suggested to maximize efficiency) to containers inside the storage account.&lt;/p>
&lt;p>Once the files are uploaded, you have the option to change to the &lt;strong>Archive&lt;/strong> access tier, which is useful for files you don’t plan on accessing frequently. This data, if ever needed, will take much longer to access.&lt;/p></description></item><item><title>Test Disk I/O Benchmarks in Linux</title><link>https://dfar.io/test-disk-i-o-benchmarks-in-linux/</link><pubDate>Fri, 07 Feb 2020 22:16:45 +0000</pubDate><guid>https://dfar.io/test-disk-i-o-benchmarks-in-linux/</guid><description>&lt;p>To test read/write speeds of a drive in Linux, you can run &lt;code>dd&lt;/code> to check write speed:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>and read speed (need to clear cache beforehand to get an accurate reading, &lt;!-- raw HTML omitted -->read more&lt;!-- raw HTML omitted -->):&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Should get a result like the following for write speed:&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Forcing Delete of Azure Recovery Services Vault</title><link>https://dfar.io/forcing-delete-of-azure-recovery-services-vault/</link><pubDate>Wed, 05 Feb 2020 16:07:17 +0000</pubDate><guid>https://dfar.io/forcing-delete-of-azure-recovery-services-vault/</guid><description>&lt;p>When trying to delete a Recovery Services vault, you can run into issues with trying to actually delete the vault from the tenant – to solve this issue, you’ll have to use the CLI and Azure CLI to do this.&lt;/p>
&lt;p>Before starting, make sure to disable soft delete within the vault as well, and then delete any currently existing soft delete items.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Setting Up Ubuntu</title><link>https://dfar.io/setting-up-ubuntu/</link><pubDate>Wed, 05 Feb 2020 15:34:24 +0000</pubDate><guid>https://dfar.io/setting-up-ubuntu/</guid><description>&lt;p>Recently switched over to using Ubuntu from Windows due to having some issues with running Windows 10 on the desktop. Here’s a quick guide on what I did to get everything set up.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>Pretty simple, just set up a USB stick with Ubuntu on it. When install, using the following configurations:&lt;/p>
&lt;ul>
&lt;li>Minimal installation&lt;/li>
&lt;li>Install third party tools (save time later)&lt;/li>
&lt;/ul>
&lt;p>Once the installation completes, I make sure to set up the display correctly for monitors, including:&lt;/p></description></item><item><title>Setting Up WordPress With An Azure VM</title><link>https://dfar.io/setting-up-wordpress-with-an-azure-vm/</link><pubDate>Sun, 02 Feb 2020 02:01:29 +0000</pubDate><guid>https://dfar.io/setting-up-wordpress-with-an-azure-vm/</guid><description>&lt;p>This guide will walk though setting up a WordPress site using an Azure VM. Some of the perks of doing this are:&lt;/p>
&lt;ul>
&lt;li>Cost-wise, you can spend as little as ~$8 a month to get a fully functional WordPress site running. If you try using MySQL and App Services in Azure, you’ll looking to spend ~$40 a month for worse specs.&lt;/li>
&lt;li>You can scale the site up as needed if performance demands arise.&lt;/li>
&lt;/ul>
&lt;h2 id="procedure">Procedure&lt;/h2>
&lt;h3 id="step-1-create-an-azure-vm">Step 1: Create An Azure VM&lt;/h3>
&lt;p>First, create an Azure VM with the following specs:&lt;/p></description></item><item><title>Cleaning up Customer Data in nopCommerce</title><link>https://dfar.io/cleaning-up-customer-data-in-nopcommerce/</link><pubDate>Tue, 14 Jan 2020 20:25:14 +0000</pubDate><guid>https://dfar.io/cleaning-up-customer-data-in-nopcommerce/</guid><description>&lt;p>Going through a nopCommerce project with a 40GB database, I found the majority of the space was allotted to a very large Customer table. To fix this, I decided to delete Customer data with the following criteria:&lt;/p>
&lt;ul>
&lt;li>No username, email, and password data&lt;/li>
&lt;li>Not a system account&lt;/li>
&lt;li>Doesn’t reference a Shipping and Billing address&lt;/li>
&lt;li>Last activity recorded a month from today’s date&lt;/li>
&lt;/ul>
&lt;p>I considered the customers having shopping cart items as well, but found that most of the junk data had one shopping cart item – I think this comes from a robot regularly adding specific items to a cart to check price.&lt;/p></description></item><item><title>Setting up a SonarQube Server in Azure</title><link>https://dfar.io/setting-up-a-sonarqube-server-in-azure/</link><pubDate>Thu, 09 Jan 2020 16:39:23 +0000</pubDate><guid>https://dfar.io/setting-up-a-sonarqube-server-in-azure/</guid><description>&lt;p>To get started with using &lt;a href="https://www.sonarqube.org/">SonarQube&lt;/a> in Azure, do the following.&lt;/p>
&lt;p>Create a virtual machine with the &lt;strong>Standard B2s&lt;/strong> (~$30/month) size or larger.&lt;/p>
&lt;p>SSH into the server and download all pre-reqs:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Create a non-root user:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Download and unzip SonarQube (you can get the wget URL from the &lt;a href="https://www.sonarqube.org/downloads/">Downloads&lt;/a> page):&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Then start it using the following &lt;strong>as the non-root user&lt;/strong>:&lt;/p></description></item><item><title>Installing Redux Into Typescript Create React App</title><link>https://dfar.io/installing-redux-into-typescript-create-react-app/</link><pubDate>Sun, 22 Dec 2019 22:49:04 +0000</pubDate><guid>https://dfar.io/installing-redux-into-typescript-create-react-app/</guid><description>&lt;p>To install Redux into an app created with Create React App that’s using Typescript, run the following to install:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Optionally, you can also install the following to allow for both:&lt;/p>
&lt;ul>
&lt;li>Warning in case of state mutation.&lt;/li>
&lt;li>Connecting to the app using &lt;!-- raw HTML omitted -->Redux DevTools&lt;!-- raw HTML omitted -->.&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Enable Routing in Typescript Create React App</title><link>https://dfar.io/enable-routing-in-typescript-create-react-app/</link><pubDate>Sat, 21 Dec 2019 22:48:58 +0000</pubDate><guid>https://dfar.io/enable-routing-in-typescript-create-react-app/</guid><description>&lt;p>When working with Create React App using the Typescript configuration, there’s a slight change to be made to set up the ability to perform routing.&lt;/p>
&lt;p>Install the following into your project:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>After that’s done, use the content in the &lt;!-- raw HTML omitted -->Example Page&lt;!-- raw HTML omitted --> in your &lt;code>App.tsx&lt;/code> file. You should be able to change between pages using the URL as reference.&lt;/p></description></item><item><title>Formatting Dates in Create React App with MomentJS</title><link>https://dfar.io/adding-moment-js-to-create-react-app/</link><pubDate>Sat, 21 Dec 2019 20:32:14 +0000</pubDate><guid>https://dfar.io/adding-moment-js-to-create-react-app/</guid><description>&lt;p>While working with React, I found I wanted a way to work with dates similiar to the way Angular uses the DatePipe to handle displaying dates correctly. The answer is in using the &lt;a href="https://momentjs.com/">momentjs&lt;/a> library.&lt;/p>
&lt;p>To do so, add the package to your project:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Then add the following code to test in one of your &lt;code>.js&lt;/code> or &lt;code>.tsx&lt;/code> files:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>You should see an ISO string being displayed. To check on ways you can use the library, check the docs on the page above.&lt;/p></description></item><item><title>Debugging Issues With cert-manager</title><link>https://dfar.io/debugging-issues-with-cert-manager/</link><pubDate>Thu, 05 Dec 2019 15:07:24 +0000</pubDate><guid>https://dfar.io/debugging-issues-with-cert-manager/</guid><description>&lt;p>If you’re using cert-manager to get a Let’s Encrypt certificate for your Kubernetes cluster and running into issues, you can do the following to see what might be going on:&lt;/p>
&lt;h2 id="check-status-of-challenge">Check Status of Challenge&lt;/h2>
&lt;p>First, check the status of the certificate:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>You’ll see something that says something like &lt;strong>Created new CertificateRequest resource “tls-secret-1764787185”&lt;/strong>. Run the following to get more information:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>This command will provide the ID of an order, so use a similiar command:&lt;/p></description></item><item><title>Upgrading a NopCommerce Plugin from 3.80 To 4.00</title><link>https://dfar.io/upgrading-a-nopcommerce-plugin-from-3-80-to-4-00/</link><pubDate>Mon, 02 Dec 2019 16:11:22 +0000</pubDate><guid>https://dfar.io/upgrading-a-nopcommerce-plugin-from-3-80-to-4-00/</guid><description>&lt;p>When upgrading nopCommerce, you’ll need to also get the latest versions of plugins to go alongside the nopCommerce installation. Depending on the upgrade, you may need to make some minor changes to the plugin to get it working.&lt;/p>
&lt;p>In particular, 3.80 -&amp;gt; 4.00 marks the transition to .NET Core, meaning there are some significant changes to make.&lt;/p>
&lt;h2 id="upgrade-the-csproj-file">Upgrade the .csproj File&lt;/h2>
&lt;p>To start, you’ll want to upgrade the &lt;code>.csproj&lt;/code> file of the project. Easiest option here is to copy an existing plugin that works with nopCommerce 4.00 and modify it accordingly. You can use the &lt;code>Description.txt&lt;/code> file to get the information you need.&lt;/p></description></item><item><title>Ripping DVDs using Handbrake</title><link>https://dfar.io/ripping-dvds-using-handbrake/</link><pubDate>Sun, 01 Dec 2019 01:00:11 +0000</pubDate><guid>https://dfar.io/ripping-dvds-using-handbrake/</guid><description>&lt;p>To rip DVDs, first do the following:&lt;/p>
&lt;ul>
&lt;li>Download &lt;!-- raw HTML omitted -->HandBrake&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>Download &lt;!-- raw HTML omitted -->libdvdcss2&lt;!-- raw HTML omitted --> and place the DLL into the Handbrake directory&lt;/li>
&lt;/ul>
&lt;p>After the above is done, open Handbrake and open the DVD as a source. It’ll take a long time to load the data in place, and then you’ll have the ability to select different chapters to rip.&lt;/p></description></item><item><title>Setting up nopCommerce 4.00+ For Use With VSCode</title><link>https://dfar.io/setting-up-nopcommerce-4-00-for-use-with-vscode/</link><pubDate>Wed, 27 Nov 2019 15:20:51 +0000</pubDate><guid>https://dfar.io/setting-up-nopcommerce-4-00-for-use-with-vscode/</guid><description>&lt;p>To get started with using nopCommerce and VSCode together, you’ll need to have the following:&lt;/p>
&lt;ol>
&lt;li>&lt;!-- raw HTML omitted -->VSCode&lt;!-- raw HTML omitted --> installed.&lt;/li>
&lt;li>The &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp">C# extension&lt;/a> installed alongside VSCode.&lt;/li>
&lt;li>.NET Core 3.0 SDK&lt;/li>
&lt;li>If running nopCommerce 4.00, &lt;!-- raw HTML omitted -->.NET Framework v4.6.1 Developer Pack&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ol>
&lt;h2 id="quick-start">Quick Start&lt;/h2>
&lt;ol>
&lt;li>&lt;!-- raw HTML omitted -->Download the nopCommerce source&lt;!-- raw HTML omitted --> and copy the contents to a folder on your PC.&lt;/li>
&lt;li>Open the folder using VSCode.&lt;/li>
&lt;li>If you’re running nopCommerce 4.00, apply the changes from &lt;!-- raw HTML omitted -->this commit&lt;!-- raw HTML omitted -->.&lt;/li>
&lt;li>Run &lt;code>dotnet restore&lt;/code> to get all dependencies required for running locally.&lt;/li>
&lt;li>In the directory &lt;code>/Presentation/Nop.Web&lt;/code>, run &lt;code>dotnet run&lt;/code>.&lt;/li>
&lt;li>Access http://localhost:55390 and run the installation process to get a database created.&lt;/li>
&lt;/ol>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a href="https://www.jerriepelser.com/blog/using-vscode-for-csharp-development/">https://www.jerriepelser.com/blog/using-vscode-for-csharp-development/&lt;/a>&lt;/p></description></item><item><title>Create An Admin in nopCommerce With Only Database Access</title><link>https://dfar.io/create-an-admin-in-nopcommerce-with-only-database-access/</link><pubDate>Tue, 26 Nov 2019 14:22:24 +0000</pubDate><guid>https://dfar.io/create-an-admin-in-nopcommerce-with-only-database-access/</guid><description>&lt;p>If you only have access to a database for nopCommerce (for example, if you’ve accidentally locked yourself out), here’s a way to create an administrator with access to the database and access to the frontend.&lt;/p>
&lt;p>First, register a new user using the standard registration process. Once that’s done, run the following SQL query on the database to assign administrator rights:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Automatically Apply EF Core Database Migrations in Azure Function App on Startup</title><link>https://dfar.io/automatically-apply-ef-core-database-migrations-in-azure-function-app-on-startup/</link><pubDate>Tue, 19 Nov 2019 18:04:49 +0000</pubDate><guid>https://dfar.io/automatically-apply-ef-core-database-migrations-in-azure-function-app-on-startup/</guid><description>&lt;p>To apply database migrations to an Azure Function app on startup, you’ll need to have the following set up first:&lt;/p>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->Entity Framework in Azure Functions&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;p>Once the above is set up, you can set up the application to apply all migrations on startup, making for a link between the running application and the database it is dependent on. This is especially useful for local development – as you won’t run into cases where a local schema is outdated.&lt;/p></description></item><item><title>Checking Validity of a Private Key, CSR and Certificate</title><link>https://dfar.io/checking-validity-of-a-private-key-csr-and-certificate/</link><pubDate>Mon, 18 Nov 2019 14:54:55 +0000</pubDate><guid>https://dfar.io/checking-validity-of-a-private-key-csr-and-certificate/</guid><description>&lt;p>If you’re working with a certificate and need a means to check if the combination of the private key, CSR and certificate are all matching, you can run the following OpenSSL commands:&lt;/p>
&lt;p>To check the private key:&lt;/p>
&lt;p>&lt;code>openssl rsa -modulus -noout -in YOUR_KEY.pem | openssl md5&lt;/code>&lt;/p>
&lt;p>To check the CSR:&lt;/p>
&lt;p>&lt;code>openssl req -noout -modulus -in YOUR_CSR.csr | openssl md5&lt;/code>&lt;/p>
&lt;p>To check the certificate:&lt;/p>
&lt;p>&lt;code>openssl x509 -modulus -noout -in CERTIFICATE.crt | openssl md5&lt;/code>&lt;/p></description></item><item><title>Copying a nopCommerce Environment</title><link>https://dfar.io/copying-a-nopcommerce-environment/</link><pubDate>Tue, 12 Nov 2019 20:57:03 +0000</pubDate><guid>https://dfar.io/copying-a-nopcommerce-environment/</guid><description>&lt;p>Copying a nopCommerce environment to a destination such as your local machine or to another environment requires two major steps:&lt;/p>
&lt;ul>
&lt;li>Copying the database&lt;/li>
&lt;li>Cloning the source code and configuring to use the copied database&lt;/li>
&lt;/ul>
&lt;h2 id="copy-the-database">Copy The Database&lt;/h2>
&lt;ol>
&lt;li>Using SSMS, log in to the source database server using administrative credentials (usually the remote environment).&lt;/li>
&lt;li>On source database server, right-click on database and click Tasks -&amp;gt; Export Data-tier Application&lt;/li>
&lt;li>Save the .bacpac file to the destination machine.&lt;/li>
&lt;li>Connect to the destination database server (usually local).&lt;/li>
&lt;li>Right-click ‘Databases’ on the destination server and click ‘Import Data-tier Application’.&lt;/li>
&lt;li>Use the .bacpac file created from the source database.&lt;/li>
&lt;/ol>
&lt;h2 id="copy-and-configure-the-source-code">Copy and Configure the Source Code&lt;/h2>
&lt;ol>
&lt;li>Clone the source code to the destination machine.&lt;/li>
&lt;li>Create the /Presentation/Nop.Web/App_Data/dataSettings.json file with the following content:&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Example:&lt;/p></description></item><item><title>Converting nopCommerce to Store Images In Filesystem Instead of Database</title><link>https://dfar.io/converting-nopcommerce-to-store-images-in-filesystem-instead-of-database/</link><pubDate>Tue, 12 Nov 2019 19:27:25 +0000</pubDate><guid>https://dfar.io/converting-nopcommerce-to-store-images-in-filesystem-instead-of-database/</guid><description>&lt;p>By default, nopCommerce stores all of the images in the database, making for simple access. However, with a lot of images, this puts a lot of load on the database, alongside making for a larger database to maintain.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->Some&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->research&lt;!-- raw HTML omitted --> shows that the performance doesnt differ greatly between the two options, but here’s a few reasons you might use either:&lt;/p></description></item><item><title>Set up Pi-Hole to Block Ads at the Network Level</title><link>https://dfar.io/set-up-pi-hole-to-block-ads-at-the-network-level/</link><pubDate>Thu, 31 Oct 2019 19:45:47 +0000</pubDate><guid>https://dfar.io/set-up-pi-hole-to-block-ads-at-the-network-level/</guid><description>&lt;p>You can use a Respberry Pi to block all ads coming in at a DNS level&lt;/p>
&lt;p>Requirements:&lt;/p>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->CanaKit &lt;!-- raw HTML omitted -->(provides Raspberry Pi, Power Supply)&lt;/li>
&lt;li>Short ethernet cable&lt;/li>
&lt;li>Monitor and keyboard for initial setup&lt;/li>
&lt;/ul>
&lt;h2 id="raspberry-pi-initial-installation-and-configuration">Raspberry Pi Initial Installation and Configuration&lt;/h2>
&lt;p>Assemble and then plug in the Raspberry Pi, which should take you to the NOOBS setup window.&lt;/p>
&lt;p>Install Raspbian, and work through until you get to the desktop screen for the Raspberry Pi.&lt;/p></description></item><item><title>Changing Default Token Expiration for Azure AD</title><link>https://dfar.io/changing-default-token-expiration-for-azure-ad/</link><pubDate>Thu, 31 Oct 2019 17:56:44 +0000</pubDate><guid>https://dfar.io/changing-default-token-expiration-for-azure-ad/</guid><description>&lt;p>To change the default token expiration timeframe when using Azure AD for authentication, you can do the following.&lt;/p>
&lt;p>First, if you haven’t yet, install the &lt;code>AzureADPreview&lt;/code> PowerShell Module:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Now, connect to Azure AD using an account that has access to manage App Registrations:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>After that, check and delete any policies that currently exist&lt;/p>
&lt;p>After that, create a new policy (this one is set for 30 minutes as an example):&lt;/p></description></item><item><title>Converting P7B Certificates into PFX Certificates</title><link>https://dfar.io/converting-p7b-certificates-into-pfx-certificates/</link><pubDate>Thu, 31 Oct 2019 14:40:55 +0000</pubDate><guid>https://dfar.io/converting-p7b-certificates-into-pfx-certificates/</guid><description>&lt;p>To convert a P7B certificate into a PFX certificate, you’ll need the following:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>.p7b&lt;/code> certificate created after the CSR is generated.&lt;/li>
&lt;li>The private key (likely &lt;code>.pem&lt;/code> or &lt;code>.key&lt;/code>) generated when generating the CSR.&lt;/li>
&lt;/ul>
&lt;p>First, doublr click the &lt;code>.p7b&lt;/code> file and export out all of the certs that appear in Certificate Manager as Base64 encoded &lt;code>.CER&lt;/code> files:&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Generating CSRs the Easy Way In Windows</title><link>https://dfar.io/generating-csrs-the-easy-way-in-windows/</link><pubDate>Mon, 28 Oct 2019 15:48:24 +0000</pubDate><guid>https://dfar.io/generating-csrs-the-easy-way-in-windows/</guid><description>&lt;p>First, download the &lt;!-- raw HTML omitted -->DigiCert Certificate Utility&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;p>Afterwards, click on “Create CSR”, and fill out the appropriate information to generate the CSR.&lt;/p>
&lt;h2 id="accessing-the-private-key-for-the-csr">Accessing the Private Key for the CSR&lt;/h2>
&lt;p>When a CSR is generated, there is a private key that associates with the CSR (and eventual certificate). You can access this in &lt;code>certmgr.exe&lt;/code>:&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Adding Icons to an Angular Web Site</title><link>https://dfar.io/adding-icons-to-an-angular-web-site/</link><pubDate>Sun, 13 Oct 2019 16:43:10 +0000</pubDate><guid>https://dfar.io/adding-icons-to-an-angular-web-site/</guid><description>&lt;p>Changing out the icons for an Angular website is just a few steps. This guide assumes you have an icon already in place, preferably in PNG format.&lt;/p>
&lt;p>First, use a tool like &lt;!-- raw HTML omitted -->Real Favicon Generator&lt;!-- raw HTML omitted --> to create the source files, which will include a &lt;code>favicon.ico&lt;/code> file alongside a series of &lt;code>apple-touch-icon*&lt;/code> files. Add these files to the &lt;code>/src&lt;/code> directory.&lt;/p>
&lt;p>After that, make the following change to your &lt;code>index.html&lt;/code> file:&lt;/p></description></item><item><title>Keep A Consumption-Based Function App Warm With A Scheduled Task</title><link>https://dfar.io/keep-a-consumption-based-function-app-warm-with-a-scheduled-task/</link><pubDate>Sat, 12 Oct 2019 16:14:40 +0000</pubDate><guid>https://dfar.io/keep-a-consumption-based-function-app-warm-with-a-scheduled-task/</guid><description>&lt;p>With Azure Function Apps using a Consumption plan, they will need to be warmed up if not used for 20 minutes to prevent having cold starts for the users in place. If you’re serving an API using a Function app, you’ll want to put this in place to keep performance ideal.&lt;/p>
&lt;p>Something to note with this solution – it works well for low-traffic APIs where the goal is to serve an API using the consumption app for low costs. Assuming larger traffic use, you may be better off switching to a dedicated App Service plan, to prevent the cold start issue at all, because cold starts will still come when scaling out.&lt;/p></description></item><item><title>Adding a Scheduled Task to NOPCommerce through the database</title><link>https://dfar.io/adding-a-scheduled-task-to-nopcommerce-through-the-database/</link><pubDate>Thu, 10 Oct 2019 14:04:31 +0000</pubDate><guid>https://dfar.io/adding-a-scheduled-task-to-nopcommerce-through-the-database/</guid><description>&lt;p>When working in NOPCommerce, you may want to create a scheduled task without having to go through plugin install and uninstall.&lt;/p>
&lt;p>First, you’ll have to have a task set up in ideally a plugin.&lt;/p>
&lt;p>You can do so by adding the following to the &lt;code>ScheduleTask&lt;/code> table in the NOPCommerce database:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>After that’s done, you should be able to immediately run the task.&lt;/p></description></item><item><title>Adding Swagger UI Documentation to Azure Function APIs</title><link>https://dfar.io/adding-swagger-ui-documentation-to-azure-function-apis/</link><pubDate>Thu, 03 Oct 2019 01:13:39 +0000</pubDate><guid>https://dfar.io/adding-swagger-ui-documentation-to-azure-function-apis/</guid><description>&lt;p>You can set up Swagger UI in your Azure Function API to allow for providing documentation for your serverless API pretty easily.&lt;/p>
&lt;h2 id="initial-configuration">Initial Configuration&lt;/h2>
&lt;p>First, add the SwashBuckle library to your process via the &lt;!-- raw HTML omitted -->.csproj file:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Next set up the SwashBuckle startup code in &lt;code>SwashBuckleStartup.cs&lt;/code>:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Now create both HTTP Triggers for the Swagger document:&lt;/p></description></item><item><title>Cleaning up Hard Drive Space in Linux</title><link>https://dfar.io/cleaning-up-hard-drive-space-in-linux/</link><pubDate>Mon, 30 Sep 2019 15:46:18 +0000</pubDate><guid>https://dfar.io/cleaning-up-hard-drive-space-in-linux/</guid><description>&lt;p>If you run into a situation where a Linux machine is running out of space, here’s a way to check what is taking up so much space and clean the server up.&lt;/p>
&lt;p>Install &lt;code>ncdu&lt;/code>:&lt;/p>
&lt;p>&lt;code>sudo apt-get install ncdu&lt;/code>&lt;/p>
&lt;p>Afterwards, start &lt;code>ncdu&lt;/code> and you’ll be presented with an interface that’ll walk you through the directories taking the most space:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="troubleshooting-8211-my-drive-is-100-full">Troubleshooting – My Drive is 100% Full&lt;/h2>
&lt;p>If you’re having trouble installing the above, you likely have a full drive that cannot do anything else. Here are a few steps that may help:&lt;/p></description></item><item><title>Getting Slack Notifications with Azure Monitor</title><link>https://dfar.io/getting-slack-notifications-with-azure-monitor/</link><pubDate>Mon, 30 Sep 2019 00:24:13 +0000</pubDate><guid>https://dfar.io/getting-slack-notifications-with-azure-monitor/</guid><description>&lt;p>An option when trying to get alerts from Azure Monitor (such as web tests, processing alerts and more) is to get them to a Slack channel to allow for an alternative to receiving alerts via email.&lt;/p>
&lt;h2 id="setting-up-slack">Setting up Slack&lt;/h2>
&lt;p>To start, you’ll need to have a Slack workspace with an available app. If needed, create the channel desired to receive notifications.&lt;/p>
&lt;p>Create a &lt;!-- raw HTML omitted -->new Slack app&lt;!-- raw HTML omitted --> named “Azure Notifications” and turn on the “Incoming Webhooks” capability, which will provide a URL (webhook) that you’ll use later to receive the notifications from Azure.&lt;/p></description></item><item><title>Automatically Upgrading Azure Kubernetes Services</title><link>https://dfar.io/automatically-upgrading-azure-kubernetes-services/</link><pubDate>Wed, 25 Sep 2019 18:28:16 +0000</pubDate><guid>https://dfar.io/automatically-upgrading-azure-kubernetes-services/</guid><description>&lt;p>Azure provides a means to upgrade Kubernetes clusters using the AKS service. This guide will walk you through using an automation account to upgrade the services on a regular basis, making the process something you don’t need to worry about.&lt;/p>
&lt;p>Note that you may want to hold off on doing this for production systems – if for some reason an upgrade were to break currently functionality, there is no means for reverting a cluster back to an original version.&lt;/p></description></item><item><title>Setting up SFTP File Migration to Azure Storage Account</title><link>https://dfar.io/setting-up-sftp-file-migration-to-azure-storage-account/</link><pubDate>Tue, 24 Sep 2019 16:19:49 +0000</pubDate><guid>https://dfar.io/setting-up-sftp-file-migration-to-azure-storage-account/</guid><description>&lt;p>This guide assumes you are using a Linux SFTP server for receiving files, and then uploading those files into an Azure storage account.&lt;/p>
&lt;h2 id="initial-setup">Initial Setup&lt;/h2>
&lt;p>Install Azure CLI on the SFTP server with the following command:&lt;/p>
&lt;p>&lt;code>curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash&lt;/code>&lt;/p>
&lt;p>Then login using an account with access to the storage account:&lt;/p>
&lt;p>&lt;code>az login&lt;/code>&lt;/p>
&lt;h2 id="perform-file-migration">Perform File Migration&lt;/h2>
&lt;p>The next step is actually sending the files over to a storage account. For this example, we’ll send all of the files in a particular folder to the storage account.&lt;/p></description></item><item><title>Manually Renew A Let’s Encrypt Certificate from Kubernetes</title><link>https://dfar.io/manually-renew-a-lets-encrypt-certificate-from-kubernetes/</link><pubDate>Mon, 23 Sep 2019 15:10:25 +0000</pubDate><guid>https://dfar.io/manually-renew-a-lets-encrypt-certificate-from-kubernetes/</guid><description>&lt;p>I work with a series of Kubernetes clusters that are restricted to public access, but still are encrypted using Let’s Encrypt certificates. Normally, when renewal is required, this process is automatically done for you.&lt;/p>
&lt;p>In the case above, I have to kick off the renewal process directly. This can be done easily with deleting the TLS secret generated for the certificate.&lt;/p>
&lt;p>First, make sure there is an open port to allow for port 80 to connect to Let’s Encrypt servers.&lt;/p></description></item><item><title>Setting up Slack Notifications with Jenkins</title><link>https://dfar.io/setting-up-slack-notifications-with-jenkins/</link><pubDate>Sat, 21 Sep 2019 16:00:27 +0000</pubDate><guid>https://dfar.io/setting-up-slack-notifications-with-jenkins/</guid><description>&lt;p>Setting up Slack notifications for build results with Jenkins is pretty simple. You’ll need the following:&lt;/p>
&lt;ul>
&lt;li>A Jenkins server that you have admin rights to.&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->Slack Notification Plugin&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>A Slack workspace, ideally with a channel dedicated to Jenkins alerts.&lt;/li>
&lt;/ul>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>To set up Slack, go to &lt;strong>&lt;!-- raw HTML omitted -->.slack.com/apps&lt;/strong> and search for Jenkins CI:&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Setting up Jenkins to Auto-Update</title><link>https://dfar.io/setting-up-jenkins-to-auto-update/</link><pubDate>Wed, 11 Sep 2019 20:53:45 +0000</pubDate><guid>https://dfar.io/setting-up-jenkins-to-auto-update/</guid><description>&lt;p>When setting up Jenkins, you’ll have to perform upgrades on the system yourself. &lt;!-- raw HTML omitted -->You can do this pretty easily&lt;!-- raw HTML omitted -->, but let’s automate the process so that each night, Jenkins will download and install the latest version.&lt;/p>
&lt;p>To do this you’ll need to have SSH access to the server.&lt;/p>
&lt;h2 id="creating-upgrade-script">Creating Upgrade Script&lt;/h2>
&lt;p>First, SSH into the server.&lt;/p>
&lt;p>Create a &lt;code>bin/&lt;/code> folder in the user’s directory:&lt;/p></description></item><item><title>Setting up a Linux SFTP Server</title><link>https://dfar.io/setting-up-a-linux-sftp-server/</link><pubDate>Fri, 06 Sep 2019 18:17:48 +0000</pubDate><guid>https://dfar.io/setting-up-a-linux-sftp-server/</guid><description>&lt;p>To get started, you’ll need to use the following:&lt;/p>
&lt;ul>
&lt;li>A virtual machine with a public IP address.&lt;/li>
&lt;li>SSH address to the above virtual machine&lt;/li>
&lt;/ul>
&lt;h2 id="configuring-the-user">Configuring the User&lt;/h2>
&lt;p>First, SSH into the server and install OpenSSH:&lt;/p>
&lt;p>&lt;code>sudo apt install -y ssh openssh-server&lt;/code>&lt;/p>
&lt;p>Now create the group to have access, alongside a user to be able to access:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Now set up the directories to allow for the following:&lt;/p></description></item><item><title>Setting up Artifactory to use a root domain with a Reverse Proxy</title><link>https://dfar.io/setting-up-artifactory-to-use-a-root-domain-with-a-reverse-proxy/</link><pubDate>Thu, 05 Sep 2019 17:39:08 +0000</pubDate><guid>https://dfar.io/setting-up-artifactory-to-use-a-root-domain-with-a-reverse-proxy/</guid><description>&lt;p>When installing Artifactory, you’ll be able to start using it as `http://YOUR_DOMAIN:8081/artifactory. To change this to a simpler domain, you can read the following guide. You’ll need to have the following:&lt;/p>
&lt;ul>
&lt;li>Artifactory administrative access&lt;/li>
&lt;li>SSH access to the server.&lt;/li>
&lt;/ul>
&lt;h2 id="setting-up-reverse-proxy-to-simplify-domain">Setting up Reverse Proxy to Simplify Domain&lt;/h2>
&lt;p>First, SSH into the server and install Apache:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>This should create a default page you can access by hitting the root URL:&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Resetting Artifactory Admin Password</title><link>https://dfar.io/resetting-artifactory-admin-password/</link><pubDate>Wed, 04 Sep 2019 15:28:46 +0000</pubDate><guid>https://dfar.io/resetting-artifactory-admin-password/</guid><description>&lt;p>If you’ve lost access to the administrator account in your on-premised Artifactory, this guide will help walk you through setting it back up. You’ll need to have &lt;strong>SSH access&lt;/strong> to the server in order to complete this guide.&lt;/p>
&lt;p>To get started, SSH into the server and open**&lt;code>&amp;lt;em&amp;gt;$&amp;lt;code&amp;gt;ARTIFACTORY_HOME/etc/security/access/bootstrap.creds&lt;/code>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->**. Enter the following information:&lt;/p>
&lt;p>&lt;code>access-admin@127.0.0.1=YOUR_PASSWORD&lt;/code>&lt;/p>
&lt;p>Now assign read/write permissions:&lt;/p>
&lt;p>&lt;code>&amp;lt;code&amp;gt;chmod&amp;amp;nbsp;600&lt;/code> &lt;code>bootstrap.creds&lt;/code>&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Adding Entity Framework/SQL Server to a Function App</title><link>https://dfar.io/adding-entity-framework-sql-server-to-a-function-app/</link><pubDate>Sun, 01 Sep 2019 20:14:49 +0000</pubDate><guid>https://dfar.io/adding-entity-framework-sql-server-to-a-function-app/</guid><description>&lt;p>When working with function apps, you may want to connect SQL Server to allow for using an API with data persistence.&lt;/p>
&lt;h2 id="setting-up-project-to-use-entity-framework">Setting up Project to Use Entity Framework&lt;/h2>
&lt;p>Add the following to your &lt;code>.csproj&lt;/code> file, in the section with &lt;code>PackageReference&lt;/code> entries:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>And then add the following to allow for copying the project DLL (supports builds in both Windows and Linux):&lt;/p></description></item><item><title>Setting Up a Root Domain with Azure DNS</title><link>https://dfar.io/setting-up-a-root-domain-with-azure-dns/</link><pubDate>Fri, 30 Aug 2019 20:05:36 +0000</pubDate><guid>https://dfar.io/setting-up-a-root-domain-with-azure-dns/</guid><description>&lt;p>When setting up Azure CDN, you may want to use a naked domain (yourdomain.com) to access. It’s a little tricky, so here’s how I set it up:&lt;/p>
&lt;h2 id="creation-and-verification">Creation and Verification&lt;/h2>
&lt;p>Create the CDN profile and endpoint in Azure.&lt;/p>
&lt;p>Next set up a custom domain:&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>To do this, you’ll need to modify the value highlighted as a CNAME record for your domain’s DNS. It will look like this:&lt;/p></description></item><item><title>Viewing Traffic to Azure VMs using NSG Flow Logs</title><link>https://dfar.io/viewing-traffic-to-azure-vms-using-nsg-flow-logs/</link><pubDate>Mon, 19 Aug 2019 19:13:37 +0000</pubDate><guid>https://dfar.io/viewing-traffic-to-azure-vms-using-nsg-flow-logs/</guid><description>&lt;p>Setting up NSG flow logs allows for viewing the traffic coming in through a network security group. This can be useful for a few things:&lt;/p>
&lt;ul>
&lt;li>Troubleshooting access issues (maybe something shouldn’t have access, or vise versa).&lt;/li>
&lt;li>Providing logging on the traffic accessing a server.&lt;/li>
&lt;/ul>
&lt;p>You’ll need the following to get started with this guide:&lt;/p>
&lt;ul>
&lt;li>Ensure that a &lt;!-- raw HTML omitted -->network watcher&lt;!-- raw HTML omitted --> is configured.&lt;/li>
&lt;li>An Azure subscription with the &lt;!-- raw HTML omitted -->Insights provider&lt;!-- raw HTML omitted --> installed.&lt;/li>
&lt;li>An existing Network Security Group.&lt;/li>
&lt;li>A storage account (ideally stored in the same resource group) that will hold the log data.&lt;/li>
&lt;/ul>
&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;p>Go into Network Watcher and click on ‘NSG Flow Logs’:&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Adding SSL to an AKS Ingress Controller (without using Let’s Encrypt)</title><link>https://dfar.io/adding-ssl-to-an-aks-ingress-controller-without-using-lets-encrypt/</link><pubDate>Mon, 12 Aug 2019 19:34:44 +0000</pubDate><guid>https://dfar.io/adding-ssl-to-an-aks-ingress-controller-without-using-lets-encrypt/</guid><description>&lt;p>I wrote about the ability to add HTTPS to an AKS cluster using Let’s Encrypt, but recently ran into a case where I needed to add a cert from a specific CA to the cluster.&lt;/p>
&lt;p>To do this, you need the following:&lt;/p>
&lt;ul>
&lt;li>An AKS cluster deployed in an Azure tenant.&lt;/li>
&lt;li>A certificate (should start with —–BEGIN CERTIFICATE—–)&lt;/li>
&lt;li>A private key associated to the certificate above (used when creating the CSR for the cert, and will start with —–BEGIN RSA PRIVATE KEY—–)&lt;/li>
&lt;/ul>
&lt;p>Import the cert into the cluster:&lt;/p></description></item><item><title>Fixing “unable to get credential storage lock: File exists” when Deploying Function App via Jenkins</title><link>https://dfar.io/fixing-unable-to-get-credential-storage-lock-file-exists-when-deploying-function-app-via-jenkins/</link><pubDate>Wed, 24 Jul 2019 14:39:16 +0000</pubDate><guid>https://dfar.io/fixing-unable-to-get-credential-storage-lock-file-exists-when-deploying-function-app-via-jenkins/</guid><description>&lt;p>When working with deploying Azure Function Apps with Jenkins, I ran into an issue when trying to rebuild a Function App from scratch with the same name. I was unable to deploy the codebase via Pipeline due to the following error:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>I was able to fix by doing the following:&lt;/p>
&lt;p>SSH into the server.&lt;/p>
&lt;p>Log in as the user that runs when running a Jenkins job (for example):&lt;/p></description></item><item><title>Setting up Jenkins to Run Angular Unit Tests</title><link>https://dfar.io/setting-up-jenkins-to-run-angular-unit-tests/</link><pubDate>Thu, 11 Jul 2019 14:12:00 +0000</pubDate><guid>https://dfar.io/setting-up-jenkins-to-run-angular-unit-tests/</guid><description>&lt;p>To be able to run unit tests in a Linux-based Jenkins instance, you just need to SSH into the Jenkins instance and run the following command:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>When installing, you may run into a dependency issue, if so, run:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>After Google Chrome is installed, you should be able to run &lt;code>npm test&lt;/code>, meaning you can use Jenkins to run unit tests in the CI process.&lt;/p></description></item><item><title>Suggested Jenkins Plugins</title><link>https://dfar.io/suggested-jenkins-plugins/</link><pubDate>Thu, 11 Jul 2019 13:55:59 +0000</pubDate><guid>https://dfar.io/suggested-jenkins-plugins/</guid><description>&lt;p>Here’s a list of Jenkins plugins I tend to use frequently.&lt;/p>
&lt;h3 id="global-slack-notification-plugin">Global Slack Notification Plugin&lt;/h3>
&lt;p>Allows for sending messages via pipeline to Slack channels.&lt;/p>
&lt;h3 id="azure-ad-plugin">Azure AD Plugin&lt;/h3>
&lt;p>Allows for authentication to Jenkins using Azure Active Directory.&lt;/p>
&lt;h3 id="checkmarx">Checkmarx&lt;/h3>
&lt;p>If you are using Checkmarx to scan for vulnerabilities in your codebases, this plugin will allow for connecting to a Checkmarx server automatically to generate a report.&lt;/p>
&lt;p>After installing, make sure to set up a server to allow for connection in Configure System -&amp;gt; Checkmarx:&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Copying Jenkins Jobs from Server to Server</title><link>https://dfar.io/copying-jenkins-jobs-from-server-to-server/</link><pubDate>Mon, 08 Jul 2019 18:23:33 +0000</pubDate><guid>https://dfar.io/copying-jenkins-jobs-from-server-to-server/</guid><description>&lt;p>In the case where you want to copy a collection of jobs from one Jenkins server to another, here’s a process you can use to make the migration. This guide assumes you have two different remote Jenkins instances to copy jobs from.&lt;/p>
&lt;p>SSH into the source server to determine where the &lt;code>/jobs&lt;/code> directory is for Jenkins. Example would be in /&lt;/p>
&lt;p>Use &lt;code>scp&lt;/code> (&lt;strong>on your local machine&lt;/strong>) to copy the jobs from the remote Jenkins instance with the jobs:&lt;/p></description></item><item><title>Setting up Jenkins with Azure AD Authentication</title><link>https://dfar.io/setting-up-jenkins-with-azure-ad-authentication/</link><pubDate>Mon, 08 Jul 2019 17:52:48 +0000</pubDate><guid>https://dfar.io/setting-up-jenkins-with-azure-ad-authentication/</guid><description>&lt;h3 id="CreatingaJenkinsserverthroughAzure-ConfiguringAzureAD">Configuring Azure AD&lt;/h3>
&lt;p>Run the following command in CLI to generate a service principal:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Save the output generated, as you’ll use it for configuration in Jenkins.&lt;/p>
&lt;p>Create a Redirect URL to &lt;a href="http://bams-jenkins.eastus.cloudapp.azure.com/securityRealm/finishLogin">https://YOURHOST/securityRealm/finishLogin&lt;/a>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Set Required Permissions in Azure Active Directory to:&lt;/p>
&lt;ul>
&lt;li>Application Permissions (Read Directory Data)&lt;/li>
&lt;li>Delegated Permissions (Read Directory Data)&lt;/li>
&lt;/ul>
&lt;p>Click on ‘Grant permissions’.&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Upgrading Ubuntu</title><link>https://dfar.io/upgrading-ubuntu/</link><pubDate>Mon, 08 Jul 2019 15:26:25 +0000</pubDate><guid>https://dfar.io/upgrading-ubuntu/</guid><description>&lt;p>To upgrade Ubuntu, use the following procedure:&lt;/p>
&lt;p>Upgrade all of your current dependencies:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Change over dependencies with new versions of packages:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Perform the OS upgrade:&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>Setting up WordPress to serve next-gen WebP images</title><link>https://dfar.io/setting-up-wordpress-to-server-webp-images/</link><pubDate>Mon, 08 Jul 2019 13:14:55 +0000</pubDate><guid>https://dfar.io/setting-up-wordpress-to-server-webp-images/</guid><description>&lt;h2 id="why-do-this">Why do this?&lt;/h2>
&lt;p>If you are looking to improve performance on your website, this will automatically convert the images on your site to the more efficient WebP format. This will help with Google Lighthouse scores (especially in solving the “Serve images in next-gen format” issue).&lt;/p>
&lt;h2 id="procedure">Procedure&lt;/h2>
&lt;p>Install the &lt;a href="https://wordpress.org/plugins/webp-express/">WebP Express Plugin&lt;/a> (and buy the developer a coffee!)&lt;/p>
&lt;p>Go into the WebP Express settings, accept the defaults, and click ‘Save settings’.&lt;/p>
&lt;p>Verify this is working by running Google’s Lighthouse analytics. You should not see the item ‘Serve images in next-gen formats” item in your listing.&lt;/p></description></item><item><title>Setting up Jenkins in Azure</title><link>https://dfar.io/setting-up-jenkins-in-azure/</link><pubDate>Mon, 08 Jul 2019 08:08:32 +0000</pubDate><guid>https://dfar.io/setting-up-jenkins-in-azure/</guid><description>&lt;p>Before getting started, you’ll need to have:&lt;/p>
&lt;ul>
&lt;li>An Azure tenant and subscription.&lt;/li>
&lt;li>OpenSSH (&lt;a href="https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse">installation&lt;/a> for Windows 10)&lt;/li>
&lt;/ul>
&lt;h2 id="installing-jenkins-via-azure-marketplace">Installing Jenkins via Azure Marketplace&lt;/h2>
&lt;p>The easiest way to install Jenkins is to use the &lt;a href="https://azuremarketplace.microsoft.com/en-us/marketplace/apps/azure-oss.jenkins">Azure Marketplace&lt;/a> link. A couple suggestions when setting up:&lt;/p>
&lt;ul>
&lt;li>I recommend using an SSH Public Key to sign in. If you haven’t yet, generate one using &lt;code>ssh-keygen&lt;/code> and then get it using &lt;code>cat ~.ssh\id_rsa.pub&lt;/code>&lt;/li>
&lt;li>Set up a domain name label, especially if you aren’t planning to put this behind a different domain.&lt;/li>
&lt;li>Set the VM as B1ms starting off – you can upgrade later as the system is used more.&lt;/li>
&lt;/ul>
&lt;p>After creation, modify the NSG created and use your public IP to secure SSH access (&lt;!-- raw HTML omitted -->check your public IP&lt;!-- raw HTML omitted -->).&lt;/p></description></item><item><title>Creating a Function App With a Full CI/CD Pipeline with VSCode and Jenkins</title><link>https://dfar.io/creating-a-function-app-with-a-full-ci-cd-pipeline-with-vscode-and-jenkins/</link><pubDate>Mon, 01 Jul 2019 14:55:01 +0000</pubDate><guid>https://dfar.io/creating-a-function-app-with-a-full-ci-cd-pipeline-with-vscode-and-jenkins/</guid><description>&lt;p>Before starting this, you’ll need to have a few things on your machine:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="vscode:extension/ms-azuretools.vscode-azurefunctions">Azure Functions VSCode Extension&lt;/a>&lt;/li>
&lt;li>Azure Functions Core Tools (&lt;code>choco install azure-functions-core-tools&lt;/code>)&lt;/li>
&lt;li>.NET Core Build Tools (&lt;code>choco install visualstudio2017-workload-netcorebuildtools&lt;/code>)&lt;/li>
&lt;li>An Azure subscription&lt;/li>
&lt;li>A Function app created inside of the Azure subscription&lt;/li>
&lt;li>A Jenkins server with the following set up:
&lt;ul>
&lt;li>Azure Function plugin installed&lt;/li>
&lt;li>A service principal configured (use &lt;code>az ad sp create-for-rbac -n &amp;quot;jenkins&amp;quot; --role contributor --scopes /subscriptions/{SubID}&lt;/code> and then add to Jenkins Credentials)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="creating-and-locally-running-the-function-app">Creating and Locally Running the Function App&lt;/h2>
&lt;p>Inside VSCode, create a function app project with the following:&lt;/p></description></item><item><title>Copying a Database in Azure with Always Encrypted Data</title><link>https://dfar.io/copying-a-database-in-azure-with-always-encrypted-data/</link><pubDate>Tue, 25 Jun 2019 15:19:39 +0000</pubDate><guid>https://dfar.io/copying-a-database-in-azure-with-always-encrypted-data/</guid><description>&lt;p>When trying to copy a database with Always Encrypted data (say, to a different environment), you’ll generally want to recycle the Column Master Key used to match the vault stored in the same Azure resource group. This takes a little bit of work to do:&lt;/p>
&lt;h2 id="pre-reqs">Pre-Reqs&lt;/h2>
&lt;p>You’ll need to have the following software installed:&lt;/p>
&lt;ul>
&lt;li>SSMS&lt;/li>
&lt;li>Azure CLI&lt;/li>
&lt;/ul>
&lt;p>You’ll also need to make sure the database you’re copying from has a key that already exists. Run the following query on your newly copied database:&lt;/p></description></item><item><title>Setting up HTTPS on an AKS Cluster</title><link>https://dfar.io/setting-up-https-on-an-aks-cluster/</link><pubDate>Mon, 24 Jun 2019 16:16:08 +0000</pubDate><guid>https://dfar.io/setting-up-https-on-an-aks-cluster/</guid><description>&lt;h2 id="pre-reqs">Pre-Reqs&lt;/h2>
&lt;p>The following is required:&lt;/p>
&lt;ul>
&lt;li>An ingress controller should already be installed.&lt;/li>
&lt;li>The public IP of the Ingress controller should have a DNS name.&lt;/li>
&lt;li>Helm needs to be running at 2.13.1.&lt;/li>
&lt;li>The Kubernetes cluster should be publicly accessible (to allow cert creation)&lt;/li>
&lt;/ul>
&lt;p>To check if Helm is running with version &lt;strong>2.13.1&lt;/strong> (there is a bug that doesn’t allow 2.14+ to work). To check, run the following:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>If the output doesn’t match as below, you need to downgrade Helm. Install:&lt;/p></description></item><item><title>Adding Font Awesome to an Angular CLI Project</title><link>https://dfar.io/adding-font-awesome-to-an-angular-cli-project/</link><pubDate>Thu, 20 Jun 2019 18:51:14 +0000</pubDate><guid>https://dfar.io/adding-font-awesome-to-an-angular-cli-project/</guid><description>&lt;p>To add &lt;a href="https://fontawesome.com">Font Awesome&lt;/a> to your Angular CLI project, do the following:&lt;/p>
&lt;p>Install Font Awesome:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Then add the following to your &lt;code>styles.css&lt;/code>:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Once that’s done, use the following to add to your project:&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>Applying IP Restrictions to a Large Set of Azure Resources</title><link>https://dfar.io/applying-ip-restrictions-to-a-large-set-of-azure-resources/</link><pubDate>Thu, 20 Jun 2019 14:13:26 +0000</pubDate><guid>https://dfar.io/applying-ip-restrictions-to-a-large-set-of-azure-resources/</guid><description>&lt;p>To do this, use PowerShell and Azure CLI to collect all of the NSGs and get all of the NSGs in the subscription:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Then go through every NSG and create the rule:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Next, get a list of the App Services:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>And go through and add the list of IPs required (must use individual IPs):&lt;/p></description></item><item><title>Creating a Buy One Get One Half Off Discount In NopCommerce</title><link>https://dfar.io/creating-a-buy-one-get-one-half-off-discount-in-nopcommerce/</link><pubDate>Wed, 19 Jun 2019 17:04:58 +0000</pubDate><guid>https://dfar.io/creating-a-buy-one-get-one-half-off-discount-in-nopcommerce/</guid><description>&lt;p>I recently worked with a client on trying to set up a Buy One Get One Half Off deal on NopCommerce – here’s what I did to get it working:&lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;p>Before starting, you should have the following:&lt;/p>
&lt;ul>
&lt;li>Have the &lt;a href="https://www.nopcommerce.com/p/2980/has-one-product-discount-requirement-rule-nopcommerce-team.aspx">Has One Product Plugin&lt;/a> installed.&lt;/li>
&lt;li>Have a product to apply the discount to.&lt;/li>
&lt;/ul>
&lt;h2 id="process">Process&lt;/h2>
&lt;p>Go to the Discounts page and create a new Discount with the following information:&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Deploying web.config with an Angular Project</title><link>https://dfar.io/deploying-web-config-with-an-angular-project/</link><pubDate>Mon, 17 Jun 2019 18:35:57 +0000</pubDate><guid>https://dfar.io/deploying-web-config-with-an-angular-project/</guid><description>&lt;p>When deploying an Angular project out to Azure, you’ll need to include a &lt;code>web.config&lt;/code> file to allow for things such as the following:&lt;/p>
&lt;ul>
&lt;li>Getting routing to work.&lt;/li>
&lt;li>Serving static content.&lt;/li>
&lt;/ul>
&lt;p>First, create a &lt;code>web.config&lt;/code> file in &lt;code>src/&lt;/code>. Here’s an example of what it might look like:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>After this is done, make a change to &lt;code>angular.json&lt;/code> to bundle the &lt;code>web.config&lt;/code> file in the build:&lt;/p></description></item><item><title>Adding Bootstrap To An Angular CLI Project</title><link>https://dfar.io/adding-bootstrap-to-an-angular-cli-project/</link><pubDate>Mon, 17 Jun 2019 14:17:19 +0000</pubDate><guid>https://dfar.io/adding-bootstrap-to-an-angular-cli-project/</guid><description>&lt;h2 id="pre-reqs">Pre-Reqs&lt;/h2>
&lt;p>Before setting this up, you’ll need to have an Angular project to add Bootstrap to. If you’re starting fresh, you can create one easily with &lt;code>ng new &amp;lt;name&amp;gt;&lt;/code>.&lt;/p>
&lt;h2 id="procedure">Procedure&lt;/h2>
&lt;p>First, install bootstrap from npm:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Then add the following to the top of your &lt;code>styles.css&lt;/code> file:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>That’s it! Bootstrap is now enabled for your Angular CLI application.&lt;/p></description></item><item><title>Setting up WordPress in Azure with AKS and Helm</title><link>https://dfar.io/setting-up-wordpress-in-azure-with-aks-and-helm/</link><pubDate>Fri, 14 Jun 2019 04:40:48 +0000</pubDate><guid>https://dfar.io/setting-up-wordpress-in-azure-with-aks-and-helm/</guid><description>&lt;p>To get started, you’ll need the following:&lt;/p>
&lt;ul>
&lt;li>kubectl&lt;/li>
&lt;li>helm&lt;/li>
&lt;li>Azure subscription&lt;/li>
&lt;/ul>
&lt;h2 id="installing-wordpress-in-aks-with-helm">Installing WordPress in AKS with Helm&lt;/h2>
&lt;p>Set up an Azure Kubernetes Service with the following:&lt;/p>
&lt;ul>
&lt;li>Node size – desired VM size (cheapest available is B2s)&lt;/li>
&lt;li>Node count – need to use at least a minimum of 1.&lt;/li>
&lt;/ul>
&lt;p>After AKS is set up, connect to it with the following:&lt;/p>
&lt;p>&lt;code>az aks get-credentials --resource-group AKS_RG --name AKS_NAME&lt;/code>&lt;/p>
&lt;p>Install Helm:&lt;/p>
&lt;p>&lt;code>helm init&lt;/code>&lt;/p></description></item><item><title>Setting Up SonarQube in Azure with Azure AD Integration</title><link>https://dfar.io/setting-up-sonarqube-in-azure-with-azure-ad-integration/</link><pubDate>Sun, 09 Jun 2019 03:27:00 +0000</pubDate><guid>https://dfar.io/setting-up-sonarqube-in-azure-with-azure-ad-integration/</guid><description>&lt;h2 id="SettingUpSonarQubeinAzurewithAzureADIntegration-InstallingSonarQube">Installing SonarQube&lt;/h2>
&lt;p>Go to the marketplace and install SonarQube from Bitnami – &lt;a href="https://bitnami.com/stack/sonarqube/cloud/azure">https://bitnami.com/stack/sonarqube/cloud/azure&lt;/a> with the following:&lt;/p>
&lt;ul>
&lt;li>resize to D1_v2&lt;/li>
&lt;li>if desired, configure any NSG restrictions&lt;/li>
&lt;/ul>
&lt;p>After creation, set a DNS name label for the IP address.&lt;/p>
&lt;p>Access using the domain name, and follow the directions in the link above to log in.&lt;/p>
&lt;h2 id="SettingUpSonarQubeinAzurewithAzureADIntegration-SettingupAzureADIntegration">Setting up Azure AD Integration&lt;/h2>
&lt;h3 id="SettingUpSonarQubeinAzurewithAzureADIntegration-SettingupHTTPS">Setting up HTTPS&lt;/h3>
&lt;p>To be able to use Azure AD, you have to use HTTPS.&lt;/p></description></item><item><title>Create Multiple Terraform Resources with a Map</title><link>https://dfar.io/create-multiple-terraform-resources-with-a-map/</link><pubDate>Fri, 07 Jun 2019 00:26:34 +0000</pubDate><guid>https://dfar.io/create-multiple-terraform-resources-with-a-map/</guid><description>&lt;p>I recently worked through a case in Terraform where I wanted to be able to pass in a map for Terraform to allow creating secrets in an Azure Key Vault. We’ll use the &lt;code>count&lt;/code>, &lt;code>keys(&lt;/code>, and &lt;code>values(&lt;/code> helpers to iterate through the map.&lt;/p>
&lt;p>This code sample will show a way to dynamically determine the amount of resources needed. In this case, this will create secrets based on the map provided in the Terraform variable:&lt;/p></description></item><item><title>Uploading a Public Key to a VM</title><link>https://dfar.io/uploading-a-public-key-to-a-vm/</link><pubDate>Sun, 02 Jun 2019 15:48:39 +0000</pubDate><guid>https://dfar.io/uploading-a-public-key-to-a-vm/</guid><description>&lt;p>This will allow for This guide assumes you are trying to access a VM with a different machine than the one used to originally create the VM. &lt;!-- raw HTML omitted -->Obtaining Public Key&lt;!-- raw HTML omitted --> First, check to see if you already have a public key for your machine: &lt;!-- raw HTML omitted -->ls &lt;del>/.ssh&lt;!-- raw HTML omitted --> If you don’t see an &lt;!-- raw HTML omitted -->id_rsa.pub&lt;!-- raw HTML omitted --> file, create a public/private key pair on the machine that will access the VM: &lt;!-- raw HTML omitted -->ssh-keygen&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->Uploading&lt;!-- raw HTML omitted --> For the next step, you’ll need to use a machine that can access the VM – using the public key generated in the step above, SSH into the VM and run the following: &lt;!-- raw HTML omitted -->scp /path/to/public_key username@server:&lt;/del>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->mv id_rsa.pub ~/.ssh/authorized_keys&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->Verification&lt;!-- raw HTML omitted --> Finally, going back to the machine you want to SSH with, SSH into the VM to make sure access is working: &lt;!-- raw HTML omitted -->ssh username@hostname&lt;!-- raw HTML omitted --> You should be able to log into without a password.&lt;/p></description></item><item><title>Setting up Remote State with Terraform and Azure</title><link>https://dfar.io/setting-up-remote-state-with-terraform-and-azure/</link><pubDate>Mon, 13 May 2019 12:48:21 +0000</pubDate><guid>https://dfar.io/setting-up-remote-state-with-terraform-and-azure/</guid><description>&lt;!-- raw HTML omitted --></description></item><item><title>Git Repo Best Practices</title><link>https://dfar.io/git-repo-best-practices/</link><pubDate>Sun, 21 Apr 2019 17:37:42 +0000</pubDate><guid>https://dfar.io/git-repo-best-practices/</guid><description>&lt;p>When creating a repository for a project, here are a few best practices to keep everything in good working state. &lt;!-- raw HTML omitted -->Forcing Pull Request Merges to master&lt;!-- raw HTML omitted --> When creating a repo, it’s a good idea to keep the master branch deployable and clean at all times. A good way to do this is to not allow direct commits to the branch. In turn, if you have a CI/CD process in place, you can have more confidence that checking things into master can result in a deployment. In a system using trunk-based deployment, you may decide to automatically deploy all changes from master into production. You can do this in Github with the following steps: Go to the repo, and go to ‘Settings’. Click on ‘Branches’. Create the rule: &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> Once this is done, if you try to commit directly to master, you’ll see the following: &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Creating a nopCommerce Plugin in version 3.90 and below</title><link>https://dfar.io/creating-a-nopcommerce-plugin-in-version-3-90-and-below/</link><pubDate>Wed, 27 Mar 2019 01:18:01 +0000</pubDate><guid>https://dfar.io/creating-a-nopcommerce-plugin-in-version-3-90-and-below/</guid><description>&lt;p>I recently worked with a client using an older version of nopCommerce that needed to have a plugin made for functionality. In particular, this plugin integrates with updown.io to allow for turning checks on and off during scheduled maintenance.&lt;/p>
&lt;p>To do this, you’ll need to have the nopCommerce source code available for use.&lt;/p>
&lt;h2 id="creating-the-plugin">Creating the Plugin&lt;/h2>
&lt;p>To get started, create a Class Library in the Plugins folder:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Make sure to change the location to the plugin folder below the name.&lt;/p></description></item><item><title>SSHing into an Azure Kubernetes Service node</title><link>https://dfar.io/sshing-into-an-azure-kubernetes-service-node/</link><pubDate>Mon, 25 Mar 2019 15:09:40 +0000</pubDate><guid>https://dfar.io/sshing-into-an-azure-kubernetes-service-node/</guid><description>&lt;!-- raw HTML omitted --></description></item><item><title>Keeping Track of Apparel in NopCommerce by Size</title><link>https://dfar.io/keeping-track-of-apparel-in-nopcommerce-by-size/</link><pubDate>Sun, 24 Mar 2019 02:51:08 +0000</pubDate><guid>https://dfar.io/keeping-track-of-apparel-in-nopcommerce-by-size/</guid><description>&lt;!-- raw HTML omitted --></description></item><item><title>Setting up WordPress in Azure with SSL for ~$8 a Month</title><link>https://dfar.io/cheaply-setting-up-wordpress-with-ssl-in-azure/</link><pubDate>Thu, 21 Mar 2019 00:53:15 +0000</pubDate><guid>https://dfar.io/cheaply-setting-up-wordpress-with-ssl-in-azure/</guid><description>&lt;ul>
&lt;li>
&lt;p>Basic plan (allowing for Always on and SSL): ~$50/month&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MySQL for Azure: ~$25
With this solution, you will create everything on one virtual machine, allowing for dynamic scaling as needed for the machine. This does of course come with some downside:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You will need to handle backing up of both the files on the server and the data in the database.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="creating-the-vm">Creating the VM&lt;/h2>
&lt;p>First, create the VM and Resource Group:&lt;/p></description></item><item><title>Setting up WordPress to force SSL in the Admin Area</title><link>https://dfar.io/setting-up-wordpress-to-force-ssl-in-the-admin-area/</link><pubDate>Fri, 15 Mar 2019 15:51:17 +0000</pubDate><guid>https://dfar.io/setting-up-wordpress-to-force-ssl-in-the-admin-area/</guid><description>&lt;!-- raw HTML omitted --></description></item><item><title>Create a Java Web App with Spring Boot Starter, Gradle, and Azure Active Directory</title><link>https://dfar.io/create-a-java-web-app-with-spring-boot-starter-gradle-and-azure-active-directory/</link><pubDate>Wed, 13 Mar 2019 18:36:50 +0000</pubDate><guid>https://dfar.io/create-a-java-web-app-with-spring-boot-starter-gradle-and-azure-active-directory/</guid><description>&lt;p>Working on a project that would eventually use Azure Active Directory for authentication, I wanted to use &lt;a href="https://docs.microsoft.com/en-us/java/azure/spring-framework/configure-spring-boot-starter-java-app-with-azure-active-directory?view=azure-java-stable">Microsoft’s guide&lt;/a> to get started with an app that could authenticate. However, the guide is written using Maven – and in our case, we are using Gradle for builds across the ecosystem.&lt;/p>
&lt;p>I was able to mostly follow the guide provided, but ran into a gotcha – involving having to add a fixed dependency to get the system working. In addition, I added a secondary API endpoint to allow for testing both with and without group authentication.&lt;/p></description></item><item><title>Delete Recovery Containers in Azure</title><link>https://dfar.io/delete-recovery-containers-in-azure/</link><pubDate>Mon, 25 Feb 2019 14:38:22 +0000</pubDate><guid>https://dfar.io/delete-recovery-containers-in-azure/</guid><description>&lt;!-- raw HTML omitted --></description></item><item><title>Setting up OpenVPN on Azure From Scratch</title><link>https://dfar.io/setting-up-openvpn-on-azure-from-scratch/</link><pubDate>Tue, 19 Feb 2019 14:26:37 +0000</pubDate><guid>https://dfar.io/setting-up-openvpn-on-azure-from-scratch/</guid><description>&lt;p>Why do this? One of the major benefits being able to use the internet with a specified IP address. If you’re going to be working systems that whitelist specific IP addresses, you can use this solution to allow for access regardless of both machine and location.&lt;/p>
&lt;p>This guide assumes that you:&lt;/p>
&lt;ul>
&lt;li>Have an Azure subscription in place.&lt;/li>
&lt;li>Have a means of SSHing into a virtual machine, such as &lt;a href="https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse">OpenSSH&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="setting-up-openvpn-server">Setting up OpenVPN Server&lt;/h2>
&lt;p>Create a virtual machine in Azure with the following specs:&lt;/p></description></item><item><title>How I Set Up My iPhone</title><link>https://dfar.io/how-i-set-up-my-iphone/</link><pubDate>Sun, 06 Jan 2019 15:21:52 +0000</pubDate><guid>https://dfar.io/how-i-set-up-my-iphone/</guid><description>&lt;!-- raw HTML omitted --></description></item><item><title>API Vs. Microservices: A Microservice Is More Than Just an API</title><link>https://dfar.io/api-vs-microservices-a-microservice-is-more-than-just-an-api/</link><pubDate>Thu, 15 Nov 2018 16:04:39 +0000</pubDate><guid>https://dfar.io/api-vs-microservices-a-microservice-is-more-than-just-an-api/</guid><description>&lt;!-- raw HTML omitted --></description></item><item><title>The Benefits of Test-driven Development</title><link>https://dfar.io/the-benefits-of-test-driven-development/</link><pubDate>Sun, 28 Oct 2018 21:12:54 +0000</pubDate><guid>https://dfar.io/the-benefits-of-test-driven-development/</guid><description>&lt;!-- raw HTML omitted --></description></item><item><title>9 Top DevOps Conferences — A Developer's Picks</title><link>https://dfar.io/9-top-devops-conferences-a-developers-picks/</link><pubDate>Wed, 17 Oct 2018 14:22:05 +0000</pubDate><guid>https://dfar.io/9-top-devops-conferences-a-developers-picks/</guid><description>&lt;p>This post was originally featured at &lt;a href="https://blog.sonatype.com/top-9-devops-conferences-a-developers-picks">Sonatype&lt;/a>.&lt;/p>
&lt;p>With the DevOps movement only continuing to grow, plenty of conferences have sprung  up around the topic. These are a great way to get acquainted with DevOps methodology and the capabilities it can bring to your organization.&lt;/p>
&lt;p>Conferences also let you do the following:&lt;/p>
&lt;ol>
&lt;li>Ramp up your knowledge on DevOps technologies, whether you’re new to the concept or have plenty of experience.&lt;/li>
&lt;li>Network with other like-minded people.&lt;/li>
&lt;li>Take a trip somewhere fun. (though, this isn’t always needed to accomplish the first two)&lt;/li>
&lt;/ol>
&lt;p>So DevOps conferences are great. But which one(s) should you attend? A person only has so much free time and money.&lt;/p></description></item><item><title>TDD vs. BDD: What Are They and How Do They Differ?</title><link>https://dfar.io/tdd-vs-bdd-what-are-they-and-how-do-they-differ/</link><pubDate>Sun, 30 Sep 2018 01:25:03 +0000</pubDate><guid>https://dfar.io/tdd-vs-bdd-what-are-they-and-how-do-they-differ/</guid><description>&lt;p>Improving the testability of software is extremely important, and a difficult ideal in its own right. To achieve that, engineers and others interested in software testability have created many strategies, tools, and methodologies to improve the testability of software solutions.&lt;/p>
&lt;p>With so many methodologies and techniques available, which one should you choose? Two of the most prominent methodologies I’ve encountered are &lt;a href="https://blog.ncrunch.net/post/test-driven-development-first-principles-explanation.aspx">test-driven development&lt;/a> (TDD) and &lt;a href="https://en.wikipedia.org/wiki/Behavior-driven_development">behavior-driven development&lt;/a> (BDD). In this post, I’ll describe what TDD and BDD are, discuss their real-world applications, and explain how they differ. In addition, I’ll talk about considerations between TDD vs. BDD.&lt;/p></description></item><item><title>Server Performance Metrics: 8 You Should Be Considering</title><link>https://dfar.io/server-performance-metrics-8-you-should-be-considering/</link><pubDate>Mon, 24 Sep 2018 20:03:09 +0000</pubDate><guid>https://dfar.io/server-performance-metrics-8-you-should-be-considering/</guid><description>&lt;p>&lt;a href="https://raygun.com/blog/server-performance-metrics/">Raygun&lt;/a>.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->With the DevOps movement entering the spotlight, more and more developers concern themselves with the end-to-end delivery of web applications. This includes the deployment, performance, and maintenance of the application.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->As an application gains more users in a production environment, it’s increasingly critical that you understand the role of the server. To determine the health of your applications, you may find it useful to gather performance metrics for the servers running your web applications.&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>Setting Up A Windows 10 Workstation in 2018</title><link>https://dfar.io/setting-up-a-windows-10-workstation-in-2018/</link><pubDate>Tue, 18 Sep 2018 18:12:56 +0000</pubDate><guid>https://dfar.io/setting-up-a-windows-10-workstation-in-2018/</guid><description>&lt;p>I recently built a new PC for myself to use for work and wanted to document the process of getting it set up for use. Each year, I go through and reinstall any system I have as a means to make sure I have this process down, alongside doing an audit to see what I’m actually using, to make sure I keep things clean.&lt;br>
Here’s the process I use when setting up a Windows 10 workstation:&lt;/p></description></item><item><title>Upgrading Jenkins On Azure</title><link>https://dfar.io/upgrading-jenkins-on-azure/</link><pubDate>Sat, 11 Aug 2018 18:51:37 +0000</pubDate><guid>https://dfar.io/upgrading-jenkins-on-azure/</guid><description>&lt;p>&lt;!-- raw HTML omitted -->the Microsoft documentation&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;h2 id="ssh-into-the-virtual-machine">SSH into the Virtual Machine&lt;/h2>
&lt;p>If you’ve been using this instance, you should be familiar with SSH forwarding and being able to access Jenkins using localhost.  If this is new, you can read &lt;!-- raw HTML omitted -->this Jenkins article&lt;!-- raw HTML omitted --> on the security setup for the Azure Jenkins Marketplace instance.&lt;br>
Use this command in a command line interface to log in to your virtual machine:&lt;/p></description></item><item><title>Living In A DevOps World (Part 2: Implementation)</title><link>https://dfar.io/living-in-a-devops-world-part-2-implementation/</link><pubDate>Mon, 30 Jul 2018 16:00:50 +0000</pubDate><guid>https://dfar.io/living-in-a-devops-world-part-2-implementation/</guid><description>&lt;p>&lt;a href="https://devops.com/living-in-a-devops-world-part-2/">DevOps.com&lt;/a>.&lt;br>
Part one of this article &lt;a href="https://devops.com/living-in-a-devops-world-part-1/">focused on some of the more behind-the-scenes benefits of an Agile DevOps approach&lt;/a>. In part two the focus turns to some of the other traditional problems that a well-executed DevOps approach can address, and how doing so can benefit an organization in more ways than just a technical perspective.&lt;br>
By way of quick review, DevOps was born out of the Lean and Agile software development methodologies when it became clear that, while those methodologies did indeed speed up the development process, a bottleneck still occurred when push came to shove and new code had to be moved to quality assurance and production environments.&lt;br>
DevOps was created to more seamlessly connect the development and operations processes, making code migration, testing and promotion to production a more efficient process. To accomplish this, the DevOps approach had to find solutions for some of the issues that caused operational delays, and create new ways to organize, implement and continuously optimize the operations process.&lt;/p></description></item><item><title>Living In A DevOps World (Part 1: Recognition)</title><link>https://dfar.io/living-in-a-devops-world-part-1-recognition/</link><pubDate>Mon, 23 Jul 2018 16:00:33 +0000</pubDate><guid>https://dfar.io/living-in-a-devops-world-part-1-recognition/</guid><description>&lt;p>&lt;!-- raw HTML omitted -->DevOps.com&lt;!-- raw HTML omitted -->.&lt;br>
DevOps has evolved into a conceptual and working model for more effective software implementation. However, there are differences of opinion on the real-world value of any approach to date.  This includes the question of the best way to implement a real-world DevOps environment. This two-part article will focus on what an agile DevOps approach is meant and not meant to address.&lt;br>
DevOps sits at the nexus of three essential business technology functions: software development, quality assurance and operations. A short and concise definition of DevOps proposed in 2015 seems as appropriate as any:&lt;/p></description></item><item><title>Setting Up a Local WordPress Development Environment</title><link>https://dfar.io/setting-up-a-local-wordpress-development-environment/</link><pubDate>Mon, 16 Jul 2018 16:00:09 +0000</pubDate><guid>https://dfar.io/setting-up-a-local-wordpress-development-environment/</guid><description>&lt;ul>
&lt;li>Setting up the website and adding content.&lt;/li>
&lt;li>Installing plugins to test their functionality.&lt;/li>
&lt;li>Viewing a functional website without a shared environment.&lt;/li>
&lt;li>Theme or plugin development.
This guide will walk you through the following steps.&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Installing a LAMP Development Environment&lt;/li>
&lt;li>Creating a database&lt;/li>
&lt;li>Downloading WordPress core files, and setting them up on server.&lt;/li>
&lt;li>Creating a local domain for use.&lt;/li>
&lt;/ol>
&lt;h2 id="installing-a-lamp-development-environment">Installing A LAMP Development Environment&lt;/h2>
&lt;p>&lt;!-- raw HTML omitted -->XAMPP&lt;!-- raw HTML omitted --> is a cross-platform LAMP (Linux, Apache, MySQL, PHP) environment used for running WordPress on your local machine.  A few platform-specific alternatives to use as well are &lt;!-- raw HTML omitted -->WampServer&lt;!-- raw HTML omitted --> for Windows, and &lt;!-- raw HTML omitted -->MampServer&lt;!-- raw HTML omitted --> for OS X.  All of these options will provide the same functionality for running a local WordPress environment, but I chose XAMPP for the following reasons:&lt;/p></description></item><item><title>Installing WordPress in Azure In 15 Minutes</title><link>https://dfar.io/installing-wordpress-in-azure-in-15-minutes/</link><pubDate>Mon, 09 Jul 2018 12:00:33 +0000</pubDate><guid>https://dfar.io/installing-wordpress-in-azure-in-15-minutes/</guid><description>&lt;ul>
&lt;li>~$9 a month for a custom domain that does not supports using SSL
&lt;ul>
&lt;li>If you’re interested in having SSL support, you’ll need to jump to the B1 level.  This costs ~$32 a month.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>~$25 a month for the lowest setting capabilities for Azure Database for MySQL
This assumes a fresh installation of WordPress, with no existing databases available on your current Azure instance.  If you have a MySQL Server already set up in Azure, you’ll change the directions a bit to just use the existing instance.&lt;/li>
&lt;/ul>
&lt;h2 id="step-1-create-a-wordpress-resource">Step 1: Create a WordPress Resource&lt;/h2>
&lt;p>After logging into the Azure portal, click on ‘Create a resource.’  Search for ‘WordPress and select the image published by WordPress.&lt;br>
You’ll be asked to provide some information, including:&lt;/p></description></item><item><title/><link>https://dfar.io/posts/copy-azure-db-to-gcp-cloud-sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dfar.io/posts/copy-azure-db-to-gcp-cloud-sql/</guid><description>&lt;h2 id="draft-false">z&amp;mdash;
title: &amp;ldquo;Copy Azure SQL Database to GCP Cloud SQL&amp;rdquo;
date: 2023-10-11T18:43:08Z
draft: false&lt;/h2>
&lt;h2 id="pre-reqs">Pre-reqs&lt;/h2>
&lt;ul>
&lt;li>Azure Account with both:
&lt;ul>
&lt;li>Azure SQL and Storage Account&lt;/li>
&lt;li>Azure SQL needs to allow Azure to access resource.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GCP Account with:
&lt;ul>
&lt;li>Cloud SQL (needs contained database authentication flag)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SSMS&lt;/li>
&lt;li>SQL Server Developer Edition (match version used in Cloud SQL)
&lt;ul>
&lt;li>Needs &lt;code>sp_configure&lt;/code> for contained database authentication.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="process">Process&lt;/h2>
&lt;ol>
&lt;li>(Linux) In Azure, scale up the DB to max DTUs to speed export process.&lt;/li>
&lt;li>Export .bacpac to Azure Storage Account.&lt;/li>
&lt;li>After export completion, scale DB back down to previous DTUs.&lt;/li>
&lt;li>(Windows) Download .bacpac using Azure Storage Explorer.&lt;/li>
&lt;li>Connect to local SQL via SSMS.&lt;/li>
&lt;li>Import Data-tier Application&lt;/li>
&lt;li>Create .bak (Database -&amp;gt; Tasks -&amp;gt; Backup)&lt;/li>
&lt;li>Upload .bak to storage account with either Azure Storage Explorer or AzCopy. (Program Files/Microsoft SQL Server/**)&lt;/li>
&lt;li>Delete .bacpac with Azure Storage Explorer&lt;/li>
&lt;li>(Linux) Create SAS via Portal&lt;/li>
&lt;li>Create and run STS job to copy file.&lt;/li>
&lt;li>Import .bak from GCS bucket to GCP Cloud SQL.&lt;/li>
&lt;/ol>
&lt;h2 id="troubleshooting">Troubleshooting&lt;/h2>
&lt;ul>
&lt;li>Low Disk Space - use WinDirStat, &lt;a href="https://helpdeskgeek.com/windows-11/what-is-the-winsxs-folder-why-is-it-huge-and-how-to-cleanup/">clear out WInSxS folder&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>